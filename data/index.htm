<html>

<head>
  <meta charset='utf-8'>
  <meta http-equiv="Cache-Control" content="no-store, max-age=0">
  <link rel="shortcut icon" href="favicon.ico" type="image/x-icon" />
  <link rel="stylesheet" href="style.css">
  <title>Самовар</title>

  <script>
      
    var current_progNum = 0;
    var totalTime = 0;

    // ==================== CONNECTION STATUS ============================================================
    var IsOffline = false; //признак обрыва связи
    var OfflineCounter = 0;

    function ConnectError (Type) {
      if (Type) {
        if (OfflineCounter < 3) { //считаем 3 обрыва подряд
          OfflineCounter++
        } else {
          document.getElementById('connection_indicator').innerHTML = `
          <img src="Red_light.gif" style="margin: 0!important; width: 20px">`;
          addMessage('Обрыв связи!', 0);
          setTimeout(() => {
            IsOffline = true;
            OfflineCounter++
          }, 100);
        }
      } else {
        document.getElementById('connection_indicator').innerHTML = `
        <img src="Green.png" style="margin: 0 !important; width: 20px">`
        IsOffline = false;
        if (OfflineCounter >= 3) { //связь вернулась, отключаем звук
          playSound(false);
        }
        OfflineCounter = 0
      }
    }

    // ==================== POWER UNIT ===================================================================
    function setPowerUnit () {
      let setPowerLabel;
      let setPowerButton;
      let powerCurrent;
      let powerTarget;
      let powerUnit;
      if (pwr_unit === 'P') {
        setPowerLabel = 'Мощность регулятора: ';
        setPowerButton = 'Установить мощность';
        powerCurrent = 'Текущая мощн.: ';
        powerTarget = 'Целевая мощн.: ';
        powerUnit = ' Вт';
        document.getElementById('current_power_line').style = 'visibility: hidden; margin: 0; padding: 0';
      } else if (pwr_unit === 'V') {
        setPowerLabel = 'Напряжение регулятора: ';
        setPowerButton = 'Установить напряжение';
        powerCurrent = 'Текущее напр.: ';
        powerTarget = 'Целевое напр.: ';
        powerUnit = ' V';
        document.getElementById('current_power_line').style = 'visibility: visible';
      } else {
        document.getElementById('PWR').style =
          'visibility: hidden;position: fixed;';
      }
      document.getElementById('set_power_label').innerHTML = setPowerLabel;
      document.getElementById('SetVoltage').value = setPowerButton;
      document.getElementById('power_current').innerHTML = powerCurrent;
      document.getElementById('power_target').innerHTML = powerTarget;
      document.getElementById('power_unit_current').innerHTML = powerUnit;
      document.getElementById('power_unit_target').innerHTML = powerUnit;
    }

    // ==================== LUA BUTTONS ==================================================================
    function AddLuaButtons () {
      let btn_list = '%btn_list%';
      if (btn_list !== '') {
        let btn_arr = btn_list.split(',');
        for (z = 0; z < btn_arr.length; z++) {
          if (btn_arr[z] !== '') {
            let arr = btn_arr[z].split('|');
            let btn = document.createElement('input');
            btn.type = 'submit';
            btn.name = 'luabtn' + z;
            btn.value = arr[1];
            btn.className = 'button';
            btn.setAttribute('onclick', 'run_lua("' + arr[0] + '");');
            document.getElementById('lua_btn_ln').appendChild(btn);
            document.getElementById('lua_btn').style = 'visibility: visible';
          }
        }
      }
    }

    // ==================== SOUND & MESSAGES QUEUE =======================================================
    var sound_is_on = true; //признак включения звукв (будет изменён на настройку пользователя при ajax)
    var IsCalmingPause = false; //признак паузы при отборе (чтобы не повторять вывод сообщения каждые 2 секунды)

    var Messages_Array = []; //текущий массив сообщений
    var sound_is_playing = false; //звук сейчас восспроизводится
    var is_ALARM = false; //признак тревоги

    const sound = new Audio('alarm.mp3');
    sound.loop = true;
    sound.preload = 'auto';
    sound.autoplay = false;

    function playSound (play) {
      if (!sound_is_playing && play) {
        sound.play();
        sound_is_playing = true;
      } else if (sound_is_playing && !play) {
        sound.pause();
        sound_is_playing = false;
      }
    }

    function getHistory(){
      let history = [];
      let fromStorage = localStorage.getItem('samovarHistory');
      try {
        let parsed = JSON.parse(fromStorage);
        history = parsed ? parsed : [];
      } catch (err) {
        console.log('ERR parsed: ', err)
        history = []
      };
      return history
    }

    function saveHistory(message){
      let saved = getHistory();
      saved.push(message);
      localStorage.setItem('samovarHistory', JSON.stringify(saved));
    }

    let historyShown = false;
    function showHystory() {
      if (historyShown) {
        document.getElementById('historyBox').style.display = 'none';
        historyShown = false
      } else {
        let historyArray = getHistory();
        document.getElementById('historyList').innerHTML = historyArray;
        document.getElementById('historyBox').style.display = 'block';
        let queue = document.getElementById('historyBox');
        queue.scrollTop = queue.scrollHeight;
        historyShown = true
      }
    };

    function clearHystory () {
      localStorage.setItem('samovarHistory', JSON.stringify([]));
      showHystory()
    }




    function addMessage (msg, lvl) {
      if (IsOffline) {
        return; //ничего не делаем чтобы не дублировать сообщения о продолжающемся разрыве связи
      } else {
        let time = new Date().toLocaleTimeString('ru-RU');
        let cssClass = null;
        switch (lvl) {
          case 0:
            cssClass = 'message_0';
            is_ALARM = true;
            break;
          case 1:
            cssClass = 'message_1';
            break;
          case 2:
            cssClass = 'message_2';
            break;
          default:
            cssClass = 'message_0';
            is_ALARM = true;
            break;
        }
        let lastMsg = `
            <div align="left" class=${cssClass} onclick=removeLastMessage() style="cursor: pointer;">
              ${time}  ${msg}
            </div>`;
        
        let msg4history = `<div align="left" class=${cssClass} style="margin-top: 0"> <span style="text-decoration: underline">${time}</span>  ${msg}</div>`;
        saveHistory(msg4history);
        
        Messages_Array.push(lastMsg); //добавляем сообщение в конец очереди
        if (Messages_Array.length > 1) {
          //убираем у предпоследнего сообщения обработчик удаления, активно всегда последнее
          previousMsg = Messages_Array[Messages_Array.length - 2];
          let changed = previousMsg.replace(
            'onclick=removeLastMessage() style="cursor: pointer"',
            ''
          );
          Messages_Array[Messages_Array.length - 2] = changed;
        }
        showMessages();
      }
    }

    function removeLastMessage () {
      Messages_Array.pop();
      if (Messages_Array.length > 0) {
        lastMsg = Messages_Array[Messages_Array.length - 1];
        let changed = lastMsg.replace(
          '<div align="left"',
          '<div align="left" onclick=removeLastMessage() style="cursor: pointer"'
        );
        Messages_Array[Messages_Array.length - 1] = changed;
      } else {
        is_ALARM = false;
      }
      showMessages();
    }

    function showMessages () {
      //показываем обновлённый список сообщений
      if (Messages_Array.length > 0) {
        let alarm_is_there = []; //массив false/true для признаков тревоги
        document.getElementById('messages').innerHTML = '';
        Messages_Array.forEach(message => {
          document.getElementById('messages').innerHTML += message;
          alarm_is_there.push(message.includes('class=message_0'));
        });
        document.getElementById('messagesBox').style.display = 'block';
        let queue = document.getElementById('messagesBox');
        queue.scrollTop = queue.scrollHeight;
        function positive (item) {
          return item === true;
        }
        is_ALARM = alarm_is_there.some(positive); //содержит ли хоть одно сообщение признак тревоги
        if (sound_is_on & is_ALARM) {
          //играем звук тревоги, если включён
          playSound(true);
        } else {
          playSound(false);
        }
      } else {
        //убираем блок, если очередь пуста
        document.getElementById('messagesBox').style.display = 'none';
        playSound(false);
      }
    }

    function clearMessages () {
      Messages_Array = [];
      showMessages();
    }

    var pwr_unit = "%pwr_unit%"; 

    var _lnIdx = 0;

    var headers = document.querySelectorAll("[data-name='spoiler-title']");

    function headerClick () {
      this.nextElementSibling.classList.toggle("spoiler-body");
      var s = this.parentNode.getElementsByClassName("spoiler-sign");
      if (s[0].innerHTML == "[+]") s[0].innerHTML = "[-]";
      else s[0].innerHTML = "[+]";
    }

    function openTab (evt, tabName) {
      var i, tabcontent, tablinks;
      tabcontent = document.getElementsByClassName("tabcontent");
      for (i = 0; i < tabcontent.length; i++) {
        tabcontent[i].style.display = "none";
      }
      tablinks = document.getElementsByClassName("tablinks");
      for (i = 0; i < tablinks.length; i++) {
        tablinks[i].className = tablinks[i].className.replace(" active", "");
      }
      document.getElementById(tabName).style.display = "block";
      evt.currentTarget.className += " active";
      return 0;
    }

    function check_program (str) {
      var arrayOfStrings = str.split("\n");
      var prevcnt = 0;
      var ret = true;
      var cnt;
      for (i = 0; i < arrayOfStrings.length; i++) {
        var arrayOfDelim = arrayOfStrings[i].split(";");
        cnt = arrayOfDelim.length;
        if (cnt == 1 && arrayOfDelim[0] != "" && arrayOfStrings.length == i - 1) ret = false;
        else if (prevcnt > 0 && cnt > 1) {
          if (prevcnt != cnt) ret = false;
        }
        prevcnt = cnt;
      }
      return ret;
    };

    function calc_program () {
      if (!check_program(document.getElementById('WProgram').value)) {
        alert("Program error!");
        return;
      }
      var t = document.getElementsByClassName("prgline");
      var k, s;
      s = "";
      for (i = 0; i < t.length; i++) {

        if (t[i].childNodes[2].value.indexOf(".") > 0) t[i].childNodes[2].value = t[i].childNodes[2].value.substring(0, t[i].childNodes[2].value.indexOf("."));
        if (t[i].childNodes[2].value.indexOf(",") > 0) t[i].childNodes[2].value = t[i].childNodes[2].value.substring(0, t[i].childNodes[2].value.indexOf(","));


        t[i].childNodes[3].value = t[i].childNodes[3].value.replace(",", ".");
        //t[i].childNodes[5].value = t[i].childNodes[5].value.replace(",", ".");
        t[i].childNodes[6].value = t[i].childNodes[6].value.replace(",", ".");

        k = t[i].childNodes;
        for (j = 1; j < 7; j++) {
          s = s + k[j].value + ";";
        }
        s = s.slice(0, -1);
        s = s + "\n";
      }
      
      document.getElementById('WProgram').value = s;
      set_num();
      calc_time()
    };
    
    function calc_time () {
        totalTime = 0;
        let stringTime = 0;
        let program = document.getElementsByClassName("prgline");;
        // console.log('program', program)
        for (let i = 0; i < program.length; i++) {
          let line = program[i];
          if (line.childNodes[1].value === 'P') {
            stringTime = line.childNodes[2].value / 3600;
          } else {
            let volume = line.childNodes[2].value / 1000;
            let speed = line.childNodes[3].value;
            stringTime = speed > 0 ? volume / speed : 0;
            // console.log('volume', volume, '; speed', speed, ' = stringTime', stringTime)
          }
          let time = line.childNodes[7];
          time.textContent = get_time(stringTime)
          totalTime = totalTime + stringTime;
        }
        document.getElementById('totalTime').textContent = get_time(totalTime);
      };

    function set_program () {
      calc_program();
      document.getElementById("WProgram").value = document.getElementById("WProgram").value.replace(",", ".");
      var server = '/program';
      request = new XMLHttpRequest();
      request.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          var myObj = this.responseText;
          if (myObj != "OK") {
            document.getElementById('WProgram').value = myObj;
            alert("Программа установлена");
          }
        }
      };
      request.open('POST', server, false);
      let formData = new FormData(document.forms.mainform);
      request.send(formData);
      if (request.status != 200) {
        alert("set_program ERROR! " + request.status + ': ' + request.statusText);
      }
      return 0;
    };

    function sleep (milliseconds) {
      var start = new Date().getTime();
      for (var i = 0; i < 1e7; i++) {
        if ((new Date().getTime() - start) > milliseconds) {
          break;
        }
      }
    };

    function sendbutton (command) {
      var server = '/command?' + command;
      request = new XMLHttpRequest();
      request.open('GET', server, false);
      request.send();
      if (request.status != 200) {
        alert("sendbutton ERROR! " + request.status + ': ' + request.statusText);
      }
      sleep(1000);
      return 0;
    };

    function sendvoltage () {
      document.getElementById('Voltage').value = document.getElementById('Voltage').value.replace(",",".");
      var num = document.getElementById('Voltage').value;
      if (!num.match(/^\d+\.\d+$/) && !num.match(/^-{0,1}\d+$/)) {
        alert("Введите значение!");
        return 0;
      }
      var command = 'voltage=' + num;
      sendbutton(command);
      alert("Установлено.");
      return 0;
    };

    function sendpumpspeed () {
      var num = document.getElementById('pumpspeed').value.replace(",", ".");
      if (!num.match(/^\d+\.\d+$/) && !num.match(/^-{0,1}\d+$/)) {
        alert("Введите скорость!");
        return 0;
      }
      var command = 'pumpspeed=' + num;
      sendbutton(command);
      alert("Скорость отбора установлена.");
      return 0;
    };

    var pressureLabel, pressureValue;

    setInterval(loadDoc, 2000);


    function loadDoc () {
      var xhttp = new XMLHttpRequest();
      xhttp.timeout = 4000;
      xhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          ConnectError(false);
          var myObj = JSON.parse(this.responseText);
          document.getElementById('version').innerHTML = myObj.version;
          document.getElementById('crnt_tm').innerHTML = myObj.crnt_tm;
          document.getElementById('stm').innerHTML = myObj.stm;
          document.getElementById('SteamTemp').innerHTML = myObj.SteamTemp.toFixed(3);
          document.getElementById('PipeTemp').innerHTML = myObj.PipeTemp.toFixed(3);
          document.getElementById('WaterTemp').innerHTML = myObj.WaterTemp.toFixed(3);
          document.getElementById('TankTemp').innerHTML = myObj.TankTemp.toFixed(3);
          document.getElementById('ACPTemp').innerHTML = myObj.ACPTemp.toFixed(3);
          document.getElementById('bme_pressure').innerHTML = myObj.bme_pressure.toFixed(3);
          if (myObj.prvl !== -1) {
            pressureLabel = 'В колонне: ';
            pressureValue = myObj.prvl.toFixed(1)
          } else {
            pressureLabel = 'В начале: ';
            pressureValue = myObj.start_pressure.toFixed(1)
          }
          document.getElementById('pressureLabel').innerHTML = pressureLabel;
          document.getElementById('pressureValue').innerHTML = pressureValue;
          document.getElementById('VolumeAll').innerHTML = myObj.VolumeAll;
          document.getElementById('ActualVolumePerHour').innerHTML = myObj.ActualVolumePerHour;
          document.getElementById('WthdrwlProgress').innerHTML = myObj.WthdrwlProgress;
          document.getElementById('CurrrentSpeed').innerHTML = myObj.CurrrentSpeed;
          document.getElementById('CurrrentStepps').innerHTML = myObj.CurrrentStepps;
          document.getElementById('TargetStepps').innerHTML = myObj.TargetStepps;
          if (myObj.PrgType === "P") myObj.PrgType = "Пауза"
          else if (myObj.PrgType === "H") myObj.PrgType = "Головы; "
          else if (myObj.PrgType === "B") myObj.PrgType = "Тело; "
          else if (myObj.PrgType === "C") myObj.PrgType = "Предзахлеб; "
          else if (myObj.PrgType === "T") myObj.PrgType = "Хвосты; "
          document.getElementById('Status').innerHTML = myObj.PrgType + myObj.Status;
          
          let new_progNum = 0;
          let progPosition = myObj.Status.indexOf('Прг №');
          if (progPosition !== -1) {
            new_progNum = parseInt(myObj.Status.substring(progPosition + 5, progPosition + 7))
          }
          if (current_progNum !== new_progNum) {
            current_progNum = new_progNum;
            getProgram()
          }
          document.getElementById('current_power_volt').innerHTML = myObj.current_power_volt.toFixed(1);
          document.getElementById('target_power_volt').innerHTML = myObj.target_power_volt.toFixed(1);
          document.getElementById('current_power_mode').innerHTML = myObj.current_power_mode;
          document.getElementById('current_power_p').innerHTML = myObj.current_power_p;
          document.getElementById('WFtotalMl').innerHTML = myObj.WFtotalMl / 1000;
          document.getElementById('WFflowRate').innerHTML = myObj.WFflowRate;
          document.getElementById('bme_temp').innerHTML = myObj.bme_temp;
          document.getElementById('heap').innerHTML = myObj.heap;
          document.getElementById('rssi').innerHTML = myObj.rssi;
          document.getElementById('fr_bt').innerHTML = myObj.fr_bt;
          sound_is_on = !!myObj.UseBBuzzer;

          let importantStatus = myObj.Status;
          if (importantStatus && importantStatus !== '') {
            if (importantStatus.includes('Продолжение через') && !IsCalmingPause) {
              addMessage(importantStatus, 1);
              IsCalmingPause = true;
            }
          };

          if (myObj.Lstatus) {
            if (myObj.Lstatus != "") {
              document.getElementById('Lstatus').innerHTML = myObj.Lstatus;
            }
          }

          var dt = myObj.PipeTemp - myObj.SteamTemp;
          document.getElementById('DeltaTemp').innerHTML = dt.toFixed(3);

          if (myObj.Msg && myObj.Msg !== "") {
            addMessage(myObj.Msg, myObj.msglvl);
          }

          if (myObj.LogMsg && myObj.LogMsg !== "") {
            console.log(myObj.crnt_tm + "; " + myObj.LogMsg);
          }

          if (myObj.WthdrwlStatus > 0) {
            document.getElementById('start').value = "Следующая программа"
          } else {
            document.getElementById('start').value = "Начать отбор"
          }

          if (myObj.WFflowRate === undefined) {
            document.getElementById('flowsensor').style = 'visibility: hidden; position: fixed;';
          } else {
            document.getElementById('flowsensor').style = '';
          }
          
          if (myObj.wp_spd === undefined) {
          } else {
            document.getElementById('add_param').innerHTML = "; ШИМ насоса воды: " + myObj.wp_spd;
          }

          var powerstr;
          var powerstyle;
          if (myObj.PowerOn == 1) {
            powerstr = 'Выключить нагрев';
            powerstyle = 'red';
          } else {
            powerstr = 'Включить нагрев';
            powerstyle = 'lightgreen';
          }
          document.getElementById('power').value = powerstr;
          document.getElementById('power').style.backgroundColor = powerstyle;

          var pausestr;
          var pausestyle;
          if (myObj.PauseOn == 1) {
            pausestr = 'Продолжить';
            pausestyle = 'lightgreen';
          } else {
            pausestr = 'Поставить на паузу';
            pausestyle = '#3498db';
          }
          document.getElementById('pause').value = pausestr;
          document.getElementById('pause').style.backgroundColor = pausestyle;

        }
      };
      xhttp.onerror = function() {
        ConnectError(true);
      };
      xhttp.ontimeout = function() {
        ConnectError(true);
      };
      xhttp.open("GET", "/ajax", true);
      xhttp.send();
    };



    function set_num () {
      var e = document.getElementById("prg").childNodes;
      var a;
      for (i = 1; i < e.length; i++) {
        a = e[i].childNodes[0];
        a.innerText = "";
        if (i < 11) a.innerText = "0";
        a.innerText = a.innerText + (i - 1);
      }
    }

    function removeLine (ln) {
      var prg = document.getElementById("prg").childNodes.length;
      if (prg < 4) return;
      var prgline = document.getElementById(ln);
      prgline.remove();
      calc_program();
    }

    function addLine (obj, s) {
      //var s = "B;100;0.1;5;0.00;120";
      var arr = s.split(";");

      var dl = document.createElement("div");
      dl.className = "prgline";
      dl.id = "prgln" + _lnIdx;

      var num = document.createElement("label");
      num.className = "prglabel";
      dl.appendChild(num);

      num.insertAdjacentHTML("afterend", '<select id="ptype' + _lnIdx + '" name="ptype' + _lnIdx + '" onchange="set_bgcolor(' + _lnIdx + ');calc_program();"><option value="H">Головы</option><option value="B">Тело</option><option value="C">Предзахлеб</option><option value="T">Хвосты</option><option value="P">Пауза</option></select>');

      var pvolume = document.createElement("input");
      pvolume.type = "text";
      pvolume.name = "pvolume" + _lnIdx;
      pvolume.value = arr[1];
      pvolume.style = 'margin-left: 2em !important';
      pvolume.setAttribute("onchange", "calc_program();");
      dl.appendChild(pvolume);

      var pspeed = document.createElement("input");
      pspeed.type = "text";
      pspeed.name = "pspeed" + _lnIdx;
      pspeed.value = arr[2];
      pspeed.style = 'margin-left: 2em !important';
      pspeed.setAttribute("onchange", "calc_program();");
      dl.appendChild(pspeed);

      pspeed.insertAdjacentHTML("afterend", '<select style="margin-left: 2em !important" id="pnum' + _lnIdx + '" name="pnum' + _lnIdx + '" onchange="calc_program()"><option value="0">0</option><option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option></select>');

      var ptemp = document.createElement("span");
      // var ptemp = document.createElement("input");
      // ptemp.type = "text";
      ptemp.name = "ptemp" + _lnIdx;
      ptemp.value = arr[4];
      // ptemp.setAttribute("onchange", "calc_program();");
      ptemp.style = 'width: 0px; visibility: hidden';
      dl.appendChild(ptemp);

      var pvolt = document.createElement("input");
      pvolt.type = "text";
      pvolt.name = "pvolt" + _lnIdx;
      pvolt.value = arr[5];
      pvolt.style = 'margin-left: 2em !important';
      pvolt.setAttribute("onchange", "calc_program();");
      dl.appendChild(pvolt);
      
      let timeBlock = document.createElement("span");
      timeBlock.className = 'prgTime';
      let stringTime = 0;
      if (arr[0] === 'P') {
        stringTime = arr[1] / 3600;
      } else {
        stringTime = arr[1] / 1000 / arr[2];
        totalTime = totalTime + stringTime;
      }
      timeBlock.textContent = get_time(stringTime);
      timeBlock.style = 'margin-left: 2em !important';
      dl.appendChild(timeBlock);

      var plus = document.createElement("img");
      plus.src = 'plus.png';
      plus.setAttribute("width", "20");
      plus.style = 'margin-left: 2em !important';
      plus.setAttribute("onclick", "addLine('prgln" + _lnIdx + "','H;0;0;0;0;0')");
      dl.appendChild(plus);

      var minus = document.createElement("img");
      minus.src = 'minus.png';
      minus.setAttribute("width", "20");
      minus.setAttribute("onclick", "removeLine('prgln" + _lnIdx + "')");
      dl.appendChild(minus);

      if (!obj) {
        var prg = document.getElementById("prg");
        prg.appendChild(dl);
      } else {
        prg = document.getElementById(obj);
        prg.after(dl);
      }

      var p = "ptype" + _lnIdx;
      var ptype = document.getElementById(p);
      ptype.value = arr[0];

      var pnum = document.getElementById("pnum" + _lnIdx);
      pnum.value = arr[3];

      set_bgcolor(_lnIdx);

      _lnIdx++;
      calc_program();
    };

    function getProgram () {
      _lnIdx = 0;
      if (!check_program(document.getElementById('WProgram').value)) {
        alert("Program error!");
        return;
      }
      var e = document.getElementById("prg");
      while (e.firstChild) {
        e.removeChild(e.firstChild);
      }
      let programPwrLabel = pwr_unit == 'P' ? 'Мощн' : 'Напр';
      e.insertAdjacentHTML("afterbegin", `
      <div class="flex_row program_header" style="font-size:18px; margin-bottom: 0.5em; margin-top: 0.5em" id="hdr">
        <div class="flex_row_center"><label class="tooltip">№</label></div>
        <div class="flex_row_center"><label class="tooltip">Тип<span class="tooltiptext">Для режима Пауза время паузы в секундах задается в поле "Объем"</span></label></div>
        <div class="flex_row_center"><label class="tooltip">Выход<span class="tooltiptext">Объем в мл</span></label></div>
        <div class="flex_row_center"><label class="tooltip">Скорость<span class="tooltiptext">Скорость в литрах в час</span></label></div>
        <div class="flex_row_center"><label class="tooltip">Тара<span class="tooltiptext">Номер ёмкости (нумерация начинается от 0)</span></label></div>
        <div class="flex_row_center"><label class="tooltip">${programPwrLabel}</label></div>
        <div class="flex_row_center"><label class="tooltip">Время</label></div>
      </div>`);
      var p = document.getElementById("WProgram");
      var varr = p.value.split("\n");
      for (z = 0; z < varr.length; z++) {
        if (varr[z] != "") addLine(false, varr[z]);
      }
      document.getElementById('totalTime').textContent = get_time(totalTime);
    };

    function set_bgcolor (indx) {
        var l = document.getElementById("prgln" + indx);
        var t = document.getElementById("ptype" + indx).value;
        let bckg = "#FFF;";
        if (t == "H") {bckg = "#80FFFA";}
        else if (t == "B") {bckg = "#32CD3229";}
        else if (t == "C") {bckg = "#FFFF0039";}
        else if (t == "P") {bckg = "#C4C4C4";}
        else if (t == "T") {bckg = "#8B451334";}
        l.style.backgroundColor = bckg;
        if (indx + 1 < current_progNum) {
          l.style.fontStyle = 'italic';
        }
        if (indx + 1 == current_progNum) {
          l.style.color = 'red';
          l.style.fontStyle = 'italic';
        }
        var e = l.childNodes;
        for (q = 0; q < e.length; q++) {
          e[q].style.backgroundColor = bckg;
          if (current_progNum === indx + 1) {
            e[q].style.color = 'red';
            e[q].style.fontStyle = 'italic';
          }
          if (indx + 1 < current_progNum) {
            e[q].style.fontStyle = 'italic';
            e[q].style.cursor = 'not-allowed';
            e[q].onclick = null;
            e[q].disabled = true;
          }
        }
      };

    function run_lua (num) {
      sendbutton("lua=" + num);
    };
    
    function run_strlua() {
      var str = document.getElementById('lua_str_i').value.replace(" ", "^");
      sendbutton("luastr=" + str);
    };
    
    function get_time (tm) {
      let s = "";
      l = Math.trunc(tm);
      if (l < 10) s = "0";
      s = s + l + ":";
      l = Math.trunc((tm - Math.trunc(tm)) * 60);
      if (l < 10) s = s + "0";
      s = s + l;
      return s;
    };

    window.onload = function() {
      getProgram();
      setPowerUnit();
      AddLuaButtons();
    };

    document.addEventListener('DOMContentLoaded', function() {
      headers = document.querySelectorAll("[data-name='spoiler-title']");
      headers.forEach(function(item) {
        item.addEventListener("click", headerClick);
      });
      document.getElementById("WProgram").addEventListener("change", function(event) {
        if (!check_program(document.getElementById('WProgram').value)) {
          alert("Program error!");
          return;
        }
        getProgram();
      });
    });

  </script>
</head>


<!-- =============================================================================================================== -->


<body>

  <div style="position: absolute; top: 0.3em; left: 0.5em; width: 20%; size: 1em; font-weight: bold; color: #FFF; text-decoration: underline; cursor: pointer" onclick='showHystory()'>История</div>
  <div class="history_box" style="display: none;" id="historyBox">
    <div style="position: absolute; right: 0.5em; top: 0.4em; z-index: 80000; size: 0.8em; font-style: italic; color: #000000; cursor: pointer" onclick='clearHystory()'>
      [x] очистить историю
    </div>
    <div class="history_array" id="historyList"></div>
  </div>



  
  <form action='none' onsubmit='return false' name="mainform" id="mainform">

    <div class="tab">
      <input type='button' class="tablinks active" onclick="openTab(event, 'Main');" value="Ректификация">
      <input type='button' class="tablinks" onclick="openTab(event, 'Prog');" value="Программа">
      <input type='button' class="tablinks" onclick="openTab(event, 'Other');" value="Дополнительно">
    </div>

    <div id="Main" class="tabcontent" style="display: block;">

      <div class="container_row" style="justify-content: space-between; font-size: 1em; margin-bottom: 0.5em;">
        <div style="display: flex; flex-direction: row; justify-content: flex-start; align-items: center; font-weight: bold">
          <div style="display: flex; flex-direction: column; justify-content: flex-start; align-items: center">
            <div>Samovar</div> <span id='crnt_tm' style="height: 0; visibility: hidden"></span>
            <div style="display: flex; flex-direction: row; justify-content: flex-start; align-items: center;">
              <div>v. </div>
              <div id='version'></div>
            </div>
          </div>

          <div style="width: 21px; display: flex; flex-direction: column; justify-content: center; align-items: center">
            <div id="connection_indicator">
              <img src="Green.png" style="margin: 0 !important; width: 20px">
            </div>
          </div>

          <div class="messages_box" style="display: none;" id="messagesBox">
            <div style="position: absolute; height: 0.6em; top: 0; right: 0.5em; cursor: pointer" onclick='clearMessages()'>
              [x] очистить
            </div>
            <div class="messages_array" id="messages"></div>
          </div>
        </div>
        <div style="display: flex; flex-direction: column; align-items: center; font-weight: bold;">
          Работа: <span id='stm'></span>
        </div>
      </div>

      <div class="container_row" style="border: 1px dashed #bbb; margin-bottom: 1em;">

        <div class="container_column" style="flex: 1.1; padding-left: 2em;">
          <div class="text" style="color: %PipeColor%;">
            Т в царге: &nbsp;&nbsp;
            <span id='PipeTemp' style="font-size: xx-large;"></span>
            &#176;C
          </div>
          <div class="text" style="color: %SteamColor%;">
            Т пара: &nbsp;&nbsp;
            <span id='SteamTemp' style="font-size: xx-large;"></span>
            &#176;C
          </div>
          <div class="text" style="color: black;">
            &#916; температур:&nbsp;&nbsp;
            <span id='DeltaTemp' style="font-size: xx-large;"></span>
            &#176;C
          </div>
        </div>

        <div class="container_column" style="flex: 1; align-items: flex-end; padding-right: 2em;">
          <div class="text" style="color: %WaterColor%;">
            Т воды: &nbsp;&nbsp;
            <span id='WaterTemp' style="font-size: xx-large;"></span>
            &#176;C
          </div>
          <div class="text" style="color: %TankColor%;">
            Т в кубе: &nbsp;&nbsp;
            <span id='TankTemp' style="font-size: xx-large;"></span>
            &#176;C
          </div>
          <div class="text" style="color: %ACPColor%;">
            Т в ТСА: &nbsp;&nbsp;
            <span id='ACPTemp' style="font-size: xx-large;"></span>
            &#176;C
          </div>
        </div>

      </div>

      <div class="container_row" style="margin-top: 1em; background-color: #7cfc0063; padding-top: 0.5em; padding-bottom: 0.5em;">
        <span style="padding-left: 1em; font-size: 1.5em; font-weight: bold; color: #333">
          Статус: <span id='Status'></span>
        </span>
      </div>


      <div class="container_row" style="border: 1px dashed #bbb; margin-bottom: 1em; padding-top: 0.5em; padding-bottom: 0.5em; justify-content: space-between;">
        <div class="container_column" style="flex: 1.1; padding-left: 1em;">
          <div class="text">
            Скорость отбора:&nbsp;
            <span id='ActualVolumePerHour' style="font-size: 1.4em; font-weight: bold;"></span>&nbsp;л/ч
          </div>
          <div class="text">
            Отобранный объем:&nbsp;
            <span id='VolumeAll'></span>&nbsp;мл
          </div>
        </div>
        <div class="container_column" style="flex: 1; align-items: flex-end; padding-right: 1em;">
          <div class="text">
            Прогресс отбора: &nbsp; <span id='WthdrwlProgress'></span>&#37;
          </div>
        </div>
      </div>

      <div id="PWR" class="container_column" style="border: 1px dashed #bbb; align-items: center; margin-top: 1em; margin-bottom: 1em;">
        <div id='regulator' class='container_column' style="align-items: center; font-size: 1.4em; font-weight: bold; margin-top: 1em;">
          <div class='container_row' style="justify-content: space-around;">
            <div class='flex_row'>
              <span id='power_current'></span>&nbsp;&nbsp;
              <span id='current_power_volt' style="font-size: 1.5em; font-weight: bold;"></span>&nbsp;
              <span id='power_unit_current' style="font-size: 1.5em; font-weight: bold;"></span>
            </div>
            <div class='flex_row'>
              Режим:&nbsp;<span id='current_power_mode'></span>
            </div>
          </div>
          <div class='flex_row' style="margin-top: 0.7em;">
            <span id='power_target'></span>&nbsp;
            <span id='target_power_volt'></span>&nbsp;
            <span id='power_unit_target'></span>
          </div>
        </div>
        <div id='VoltH2' class="container_row" style="justify-content: center; margin-top: 1em;">
          <div class="flex_row">
            <span class="text" id='set_power_label'></span>
            <input name='Voltage' id='Voltage' type='text' value=''>
          </div>
          <div class="flex_row" style="padding-bottom: 0.5em;">
            <input id='SetVoltage' type='submit' name='SetVoltage' onclick='sendvoltage();' class="button">
          </div>
        </div>
        <div class="container_row" style="width: 100%; justify-content: center; align-items: center; font-size: 1.6em; font-weight: bold;">
          <span class='dvcs' id='current_power_line'>
            Мощность:&nbsp;&nbsp; <span id='current_power_p' style="font-size: 1.3em; font-weight: bold;"></span>&nbsp;Вт
          </span>
        </div>
      </div>


      <div class="container_row" style="border: 1px dashed #bbb; margin-bottom: 1em; justify-content: space-between;">
        <div class="text">
          Давление: &nbsp;
          <span id='bme_pressure'></span>
          мм рт.ст.
        </div>
        <div class="text">
          <span id='pressureLabel'></span> &nbsp;
          <span id='pressureValue'></span>
          мм рт.ст.
        </div>
      </div>

      <div style="margin-top: 1em;">
        <span class='dvcs'>Системные параметры: Heap=<span id='heap'></span>; BME temp=<span id='bme_temp'></span>; RSSI = <span id='rssi'></span>; Свободно: <span id='fr_bt'></span><span id='add_param'></span></span>
      </div>

      <div class="container_column" style="margin-bottom: 1em;">
        <div class="container_row" style="justify-content: space-around; align-items: center;">
          <input id='power' type='submit' name='power' value='Включить нагрев' onclick='sendbutton("power=1");' class="button">
          <input id='start' type='submit' name='start' value='Начать отбор' onclick='sendbutton("start=1");' class="button">
          <input id='pause' type='submit' name='pause' value='Пауза' onclick='sendbutton("pause=1");' class="button">
        </div>
        <div class="container_row" style="justify-content: space-around; align-items: center;">
          <input id='reset' type='submit' name='reset' value='Сбросить процесс' onclick='sendbutton("reset=1");' class="button">
          <input id='chart' type='submit' name='chart' value='График' onclick='javascript:location.href="chart.htm"' class="button">
          <input id='setup' type='submit' name='setup' value='Настройки' onclick='javascript:location.href="setup.htm"' class="button">
        </div>
      </div>

    </div>

    <div id="Prog" class="tabcontent">
      <div class="text" style="margin-top: 1em; margin-bottom: 1em">Программа отбора:</div>

      <div class="prg" id="prg"></div>
      <div style="display: flex; flex-direction: row; justify-content: right; color: #555; font-size: 1.4em; font-weight: bold;">
        Итого: &nbsp;
        <div id="totalTime"> </div>
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;
      </div>

      <div>

        <div style="border: 1px dashed #bbb; padding: 1em; margin-top: 1em; margin-bottom: 1em; background-color: #F7F7F7">

          <div class="list-group">
            <div class="list-group-item list-header" data-name="spoiler-title">
              <span class="spoiler-sign">[+]</span>Описание программы отбора в текстовом формате для сохранения в облаке:
            </div>
            <div class="list-group-item list-content spoiler-body">
              <textarea cols="40" rows="5" id='Descr' name='Descr' maxlength='250'>%Descr%</textarea>
            </div>
          </div>

          <div class="list-group">
            <div class="list-group-item list-header" data-name="spoiler-title">
              <span class="spoiler-sign">[+]</span>Программа отбора:
            </div>
            <div class="list-group-item list-content spoiler-body">
              <textarea cols="40" rows="5" id='WProgram' name='WProgram'>%WProgram%</textarea>
              <ul>
                <li style="font-size: 1em; font-weight: bold; font-style: italic; margin-top: 0.3em">
                  Тип отбора
                  <div style="font-size: 1em; font-weight: normal; font-style: normal; margin-left: 0.7em;">
                    <div>
                      <span style="font-weight: bold;"> H </span> - головы (Heads)
                    </div>
                    <div>
                      <span style="font-weight: bold;"> B </span> - тело (Body)
                    </div>
                    <div>
                      <span style="font-weight: bold;"> P </span> - пауза (Pause)
                    </div>
                    <div>
                      <span style="font-weight: bold;"> T </span> - хвост (Tail)
                    </div>
                  </div>
                </li>
                <li style="font-size: 1em; font-weight: bold; font-style: italic; margin-top: 0.9em">
                  Объем отбора (мл)
                </li>
                <li style="font-size: 1em; font-weight: bold; font-style: italic; margin-top: 0.9em">
                  Скорость отбора (л/ч)
                </li>
                <li style="font-size: 1em; font-weight: bold; font-style: italic; margin-top: 0.9em">
                  Номер емкости для отбора
                </li>
                <li style="font-size: 1em; font-weight: bold; font-style: italic; margin-top: 0.9em">
                  Температура отбора
                  <div style="font-size: 1em; font-weight: normal; font-style: normal; margin-left: 1em;">
                    <p>Если значение Температуры равно 0 - не используется.</p>
                    <p>Если значение Т указано и больше 20&#176;C, то при Т пара больше, чем указанная температура, произойдет переход на следующую строку программы.</p>
                    <p>Если значение Т указано больше 0 и меньше 20&#176;C, то при Т пара больше, чем сумма Т пара, которая была запомнена при переходе на эту строку программы и Т в программе, произойдет переход на следующую строку программы.</p>
                  </div>
                </li>
                <li style="font-size: 1em; font-weight: bold; font-style: italic; margin-top: 0.9em">
                  Напряжение отбора
                </li>
              </ul>

              <div style="border: 1px dashed #bbb; padding: 1em; 
      margin-top: 1em; margin-bottom: 1em; margin-right: 3em; margin-left: 3em; 
      font-size: 1.2em; font-weight: bold; background-color: #f2f2f2">
                Пример программы отбора:
                <div style="font-size: 1em; font-weight: normal; font-style: normal; margin-left: 1em; padding-top: 1em;">
                  <div>H;100;0.1;1;0.00;120</div>
                  <div>P;120;0.00;0;0.00;140</div>
                  <div>B;5000;0.75;2;0.00;90</div>
                </div>
              </div>
            </div>
          </div>
        </div>

      </div>

      <div class="container_row" style="justify-content: space-around; align-items: center; margin-top: 2em; margin-bottom: 1em">
        <input id='return' type='button' name='program' value='Расчитать программу' onclick='javascript:location.href="program.htm"' class="button">
        <input id='setprogram' type='button' name='setprogram' value='Установить программу' onclick='set_program();' class="button">
      </div>
    </div>

    <div id="Other" class="tabcontent">
      <div style="text-align: center;">
        <div class="text" id='pmpspd'>
          <span class="tooltip">Скорость отбора:<span class="tooltiptext">Скорость установить можно при выполняющейся
              программе отбора. Установка скорости влияет только на выполняющуюся строку программы.</span></span>
          <input name='pumpspeed' id='pumpspeed' type='text' value=''> л/ч
          <input id='Setpmpspd' type='submit' name='Setpmpspd' value='Установить' onclick='sendpumpspeed();' class="button">
        </div>
        <div class="tooltip"><span class="tooltiptext">Текущие значения температур Царги и Пара установятся как
            основные</span>
          <input id='setbody' type='submit' name='setbody' value='Задать Т отбора тела' onclick='sendbutton("setbodytemp=1");' class="button">
        </div>
      </div>
      <div class="text">Скорость шагового двигателя: <span id='CurrrentSpeed'></span> шагов/сек</div>
      <div class='dvcs'>
        <span class='dvcs'>Текущие шаги: <span id='CurrrentStepps'></span></span>
        <span class='dvcs'>Целевое шагов: <span id='TargetStepps'></span></span>
      </div>
      <div class='dvcs' id='flowsensor' style='visibility: hidden;position: fixed;'>
        <span class='dvcs'>Расход воды: <span id='WFtotalMl'></span> л</span>
        <span class='dvcs'>Скорость расхода воды: <span id='WFflowRate'></span> л/мин</span>
      </div>

      <div style="visibility: hidden" id="lua_btn">
        <div class="container_row" style="border: 1px dashed #bbb; margin-bottom: 1em; justify-content: space-between;">
          <div class="container_column" style="flex: 1.1; padding-left: 2em;">
            <div class="container_row" style="justify-content: space-around; align-items: center; display: block;" id="lua_btn_ln"></div>
            <div class="container_row" style="justify-content: space-around; align-items: center;" id="lua_str_d">
              <input name='lua_str_i' id='lua_str_i' type='text' value='' style='padding: 5px; width: 200px; margin-bottom: 10px; margin-left: 100px;'>
              <input type="submit" name="lua_str_b" value="Выполнить Lua" class="button" onclick="run_strlua();" style='margin-bottom: 20px; margin-right: 100;'>
            </div>
            <div class="container_row" style="margin-top: 10px !important; margin-bottom: 10px !important;"><span>Статус Lua:</span><span id="Lstatus"></span></div>
          </div>
        </div>
      </div>
    </div>

  </form>
  <img src="Red_light.gif" style="width: 0; height: 0; visibility: hidden;">
</body>

</html>