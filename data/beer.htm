<html>

<head>
  <meta charset='utf-8'>
  <meta http-equiv="Cache-Control" content="no-cache">
  <link rel="shortcut icon" href="favicon.ico" type="image/x-icon" />
  <link rel="stylesheet" href="style.css">
  <title>Самовар</title>

  <script>
    // ==================== CONNECTION STATUS ============================================================
    var IsOffline = false; //признак обрыва связи
    var OfflineCounter = 0;

    function ConnectError (Type) {
      if (Type) {
        if (OfflineCounter < 3) { //считаем 3 обрыва подряд
          OfflineCounter++
        } else {
          document.getElementById('connection_indicator').innerHTML = `
          <img src="Red_light.gif" style="margin: 0!important; width: 20px">`;
          addMessage('Обрыв связи!', 0);
          setTimeout(() => {
            IsOffline = true;
            OfflineCounter++
          }, 100);
        }
      } else {
        document.getElementById('connection_indicator').innerHTML = `
        <img src="Green.png" style="margin: 0 !important; width: 20px">`
        IIsOffline = false;
        if (OfflineCounter >= 3) {
          playSound(false);
        }
        OfflineCounter = 0
      }
    };

    // ==================== POWER UNIT ===================================================================
    function setPowerUnit () {
      let setPowerLabel;
      let setPowerButton;
      let powerCurrent;
      let powerTarget;
      let powerUnit;
      if (pwr_unit === 'P') {
        setPowerLabel = 'Мощность регулятора: ';
        setPowerButton = 'Установить мощность';
        powerCurrent = 'Текущая мощн.: ';
        powerTarget = 'Целевая мощн.: ';
        powerUnit = ' Вт';
        document.getElementById('current_power_line').style = 'visibility: hidden';
      } else if (pwr_unit === 'V') {
        setPowerLabel = 'Напряжение регулятора: ';
        setPowerButton = 'Установить напряжение';
        powerCurrent = 'Текущее напр.: ';
        powerTarget = 'Целевое напр.: ';
        powerUnit = ' V';
        document.getElementById('current_power_line').style = 'visibility: visible';
      } else {
        document.getElementById('PWR').style =
          'visibility: hidden;position: fixed;';
      }
      document.getElementById('set_power_label').innerHTML = setPowerLabel;
      document.getElementById('SetVoltage').value = setPowerButton;
      document.getElementById('power_current').innerHTML = powerCurrent;
      document.getElementById('power_target').innerHTML = powerTarget;
      document.getElementById('power_unit_current').innerHTML = powerUnit;
      document.getElementById('power_unit_target').innerHTML = powerUnit;
    }

    // ==================== LUA BUTTONS ==================================================================
    function AddLuaButtons () {
      let btn_list = '%btn_list%';
      if (btn_list !== '') {
        let btn_arr = btn_list.split(',');
        for (z = 0; z < btn_arr.length; z++) {
          if (btn_arr[z] !== '') {
            let arr = btn_arr[z].split('|');
            let btn = document.createElement('input');
            btn.type = 'submit';
            btn.name = 'luabtn' + z;
            btn.value = arr[1];
            btn.className = 'button';
            btn.setAttribute('onclick', 'run_lua("' + arr[0] + '");');
            document.getElementById('lua_btn_ln').appendChild(btn);
            document.getElementById('lua_btn').style = 'visibility: visible';
          }
        }
      }
    }

    // ==================== SOUND & MESSAGES QUEUE =======================================================
    var sound_is_on = true; //признак включения звукв (будет изменён на настройку пользователя при ajax)
    var IsCalmingPause = false; //признак паузы при отборе (чтобы не повторять вывод сообщения каждые 2 секунды)

    var Messages_Array = []; //текущий массив сообщений
    var sound_is_playing = false; //звук сейчас восспроизводится
    var is_ALARM = false; //признак тревоги

    const sound = new Audio('alarm.mp3');
    sound.loop = true;
    sound.preload = 'auto';
    sound.autoplay = false;

    function playSound (play) {
      if (!sound_is_playing && play) {
        sound.play();
        sound_is_playing = true;
      } else if (sound_is_playing && !play) {
        sound.pause();
        sound_is_playing = false;
      }
    }

    function getHistory(){
      let history = [];
      let fromStorage = localStorage.getItem('samovarHistory');
      try {
        let parsed = JSON.parse(fromStorage);
        history = parsed ? parsed : [];
      } catch (err) {
        console.log('ERR parsed: ', err)
        history = []
      };
      return history
    }

    function saveHistory(message){
      let saved = getHistory();
      saved.push(message);
      localStorage.setItem('samovarHistory', JSON.stringify(saved));
    }

    let historyShown = false;
    function showHistory() {
      if (historyShown) {
        document.getElementById('historyBox').style.display = 'none';
        historyShown = false
      } else {
        let historyArray = getHistory();
        document.getElementById('historyList').innerHTML = historyArray;
        document.getElementById('historyBox').style.display = 'block';
        let queue = document.getElementById('historyBox');
        queue.scrollTop = queue.scrollHeight;
        historyShown = true
      }
    };

    function clearHistory () {
      localStorage.setItem('samovarHistory', JSON.stringify([]));
      showHistory()
    }

    function addMessage (msg, lvl) {
      if (IsOffline) {
        return; //ничего не делаем чтобы не дублировать сообщения о продолжающемся разрыве связи
      } else {
        let time = new Date().toLocaleTimeString('ru-RU');
        let cssClass = null;
        switch (lvl) {
          case 0:
            cssClass = 'message_0';
            is_ALARM = true;
            break;
          case 1:
            cssClass = 'message_1';
            break;
          case 2:
            cssClass = 'message_2';
            break;
          default:
            cssClass = 'message_0';
            is_ALARM = true;
            break;
        }
        let lastMsg = `
            <div align="left" class=${cssClass} onclick=removeLastMessage() style="cursor: pointer;">
              ${time}  ${msg}
            </div>`;
        
        let msg4history = `<div align="left" class=${cssClass} style="margin-top: 0"> <span style="text-decoration: underline">${time}</span>  ${msg}</div>`;
        saveHistory(msg4history);
        
        Messages_Array.push(lastMsg); //добавляем сообщение в конец очереди
        if (Messages_Array.length > 1) {
          //убираем у предпоследнего сообщения обработчик удаления, активно всегда последнее
          previousMsg = Messages_Array[Messages_Array.length - 2];
          let changed = previousMsg.replace(
            'onclick=removeLastMessage() style="cursor: pointer"',
            ''
          );
          Messages_Array[Messages_Array.length - 2] = changed;
        }
        showMessages();
      }
    }

    function removeLastMessage () {
      //удаляям последнее сообщение
      Messages_Array.pop();
      if (Messages_Array.length > 0) {
        lastMsg = Messages_Array[Messages_Array.length - 1];
        let changed = lastMsg.replace(
          '<div align="left"',
          '<div align="left" onclick=removeLastMessage() style="cursor: pointer"'
        );
        Messages_Array[Messages_Array.length - 1] = changed;
      } else {
        is_ALARM = false;
        IsCalmingPause = false;
      }
      showMessages();
    }

    function showMessages () {
      //показываем обновлённый список сообщений
      if (Messages_Array.length > 0) {
        let alarm_is_there = []; //массив false/true для признаков тревоги
        document.getElementById('messages').innerHTML = '';
        Messages_Array.forEach(message => {
          document.getElementById('messages').innerHTML += message;
          alarm_is_there.push(message.includes('class=message_0'));
        });
        document.getElementById('messagesBox').style.display = 'block';
        let queue = document.getElementById('messagesBox');
        queue.scrollTop = queue.scrollHeight;
        function positive (item) {
          return item === true;
        }
        is_ALARM = alarm_is_there.some(positive); //содержит ли хоть одно сообщение признак тревоги
        if (sound_is_on & is_ALARM) {
          //играем звук тревоги, если включён
          playSound(true);
        } else {
          playSound(false);
        }
      } else {
        //убираем блок, если очередь пуста
        document.getElementById('messagesBox').style.display = 'none';
        playSound(false);
      }
    }

    function clearMessages () {
      Messages_Array = [];
      showMessages();
    }

    var pwr_unit = "%pwr_unit%";

    var _lnIdx = 0;

    var headers = document.querySelectorAll("[data-name='spoiler-title']");

    function headerClick () {
      this.nextElementSibling.classList.toggle("spoiler-body");
      var s = this.parentNode.getElementsByClassName("spoiler-sign");
      if (s[0].innerHTML == "[+]") s[0].innerHTML = "[-]";
      else s[0].innerHTML = "[+]";
    }

    function loadFile (e) {
      var file = e;
      var reader = new FileReader();
      reader.onload = function() {
        var element = document.getElementById("prg");
        while (element.firstChild) {
          element.removeChild(element.firstChild);
        }
        document.getElementById('WProgram').value = reader.result;
        glcalcnum = false;
        getProgram();
      };
      reader.readAsText(file, "UTF-8");
    }

    function SaveProgramToFile () {
      var filename, text;
      filename = 'programbackup.txt';
      //  text = getJson(document.getElementById('setupform'));
      text = document.getElementById('WProgram').value;

      var pom = document.createElement('a');
      pom.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
      pom.setAttribute('download', filename);

      pom.style.display = 'none';
      document.body.appendChild(pom);

      pom.click();

      document.body.removeChild(pom);
    }

    function openTab (evt, tabName) {
      var i, tabcontent, tablinks;
      tabcontent = document.getElementsByClassName("tabcontent");
      for (i = 0; i < tabcontent.length; i++) {
        tabcontent[i].style.display = "none";
      }
      tablinks = document.getElementsByClassName("tablinks");
      for (i = 0; i < tablinks.length; i++) {
        tablinks[i].className = tablinks[i].className.replace(" active", "");
      }
      document.getElementById(tabName).style.display = "block";
      evt.currentTarget.className += " active";
      return 0;
    }

    function check_program (str) {
      var arrayOfStrings = str.split("\n");
      var prevcnt = 0;
      var ret = true;
      var cnt;
      for (i = 0; i < arrayOfStrings.length; i++) {
        var arrayOfDelim = arrayOfStrings[i].split(";");
        cnt = arrayOfDelim.length;
        if (cnt == 1 && arrayOfDelim[0] != "" && arrayOfStrings.length == i - 1) ret = false;
        else if (prevcnt > 0 && cnt > 1) {
          if (prevcnt != cnt) ret = false;
        }
        prevcnt = cnt;
      }
      return ret;
    }

    function set_program () {
      document.getElementById("WProgram").value = document.getElementById("WProgram").value.replace(",", ".");
      if (!check_program(document.getElementById('WProgram').value)) {
        alert("Program error!");
        return;
      }
      var server = '/program';
      request = new XMLHttpRequest();
      request.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          var myObj = this.responseText;
          if (myObj != "OK") {
            document.getElementById('WProgram').value = myObj;
            alert("Ok");
          }
        }
      };
      request.open('POST', server, false);
      let formData = new FormData(document.forms.mainform);
      request.send(formData);
      if (request.status != 200) {
        alert(request.status + ': ' + request.statusText);
      }
      return 0;
    };

    function sleep (milliseconds) {
      var start = new Date().getTime();
      for (var i = 0; i < 1e7; i++) {
        if ((new Date().getTime() - start) > milliseconds) {
          break;
        }
      }
    };

    function sendbutton (command) {
      var server = '/command?' + command;
      request = new XMLHttpRequest();
      request.open('GET', server, false);
      request.send();
      if (request.status != 200) {
        alert("sendbutton ERROR! " + request.status + ': ' + request.statusText);
      }
      sleep(1000);
      return 0;
    };

    function sendvoltage () {
      document.getElementById('Voltage').value = document.getElementById('Voltage').value.replace(",",".");
      var num = document.getElementById('Voltage').value;
      if (!num.match(/^\d+\.\d+$/) && !num.match(/^-{0,1}\d+$/)) {
        alert("Введите напряжение!");
        return 0;
      }
      var command = 'voltage=' + num;
      sendbutton(command);
      alert("Установлено.");
      return 0;
    };

    function sendpumpspeed () {
      var num = document.getElementById('pumpspeed').value;
      if (!num.match(/^\d+\.\d+$/) && !num.match(/^-{0,1}\d+$/)) {
        alert("Введите скорость!");
        return 0;
      }
      var command = 'pumpspeed=' + num;
      sendbutton(command);
      alert("Ok");
      return 0;
    };

    function loadDoc () {
      var xhttp = new XMLHttpRequest();
      xhttp.timeout = 4000;
      xhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          ConnectError(false);
          var myObj = JSON.parse(this.responseText);
          document.getElementById('version').innerHTML = myObj.version;
          document.getElementById('crnt_tm').innerHTML = myObj.crnt_tm;
          document.getElementById('stm').innerHTML = myObj.stm;
          document.getElementById('SteamTemp').innerHTML = myObj.SteamTemp.toFixed(3);
          document.getElementById('PipeTemp').innerHTML = myObj.PipeTemp.toFixed(3);
          document.getElementById('WaterTemp').innerHTML = myObj.WaterTemp.toFixed(3);
          document.getElementById('TankTemp').innerHTML = myObj.TankTemp.toFixed(3);
          document.getElementById('ACPTemp').innerHTML = myObj.ACPTemp.toFixed(3);
          document.getElementById('WthdrwlProgress').innerHTML = myObj.WthdrwlProgress;
          if (myObj.PrgType === "P") myObj.PrgType = "Пауза; "
          else if (myObj.PrgType === "M") myObj.PrgType = "Темп. закладки солода; "
          else if (myObj.PrgType === "B") myObj.PrgType = "Кипячение; "
          else if (myObj.PrgType === "C") myObj.PrgType = "Охлаждение; "
          else if (myObj.PrgType === "W") myObj.PrgType = "Ожидание; "
          else if (myObj.PrgType === "F") myObj.PrgType = "Брожение; "
          else if (myObj.PrgType === "A") myObj.PrgType = "Автотюнинг; "
          else if (myObj.PrgType === "L") myObj.PrgType = "Lua; "
          document.getElementById('Status').innerHTML = myObj.PrgType + myObj.Status;
          document.getElementById('current_power_volt').innerHTML = myObj.current_power_volt;
          document.getElementById('target_power_volt').innerHTML = myObj.target_power_volt;
          document.getElementById('current_power_mode').innerHTML = myObj.current_power_mode;
          document.getElementById('current_power_p').innerHTML = myObj.current_power_p;
          document.getElementById('bme_temp').innerHTML = myObj.bme_temp;
          document.getElementById('heap').innerHTML = myObj.heap;
          document.getElementById('rssi').innerHTML = myObj.rssi;
          document.getElementById('fr_bt').innerHTML = myObj.fr_bt;
          sound_is_on = !!myObj.UseBBuzzer;

          if (myObj.wp_spd === undefined) {
          } else {
            document.getElementById('add_param').innerHTML = "; ШИМ насоса воды: " + myObj.wp_spd;
          }

          if (myObj.Lstatus) {
            if (myObj.Lstatus != "") {
              document.getElementById('Lstatus').innerHTML = myObj.Lstatus;
            }
          }

          if (myObj.Msg && myObj.Msg !== "") {
            addMessage(myObj.Msg, myObj.msglvl);
          }

          if (myObj.LogMsg && myObj.LogMsg !== "") {
            console.log(myObj.crnt_tm + "; " + myObj.LogMsg);
          }

          var powerstr;
          var powerstyle;
          if (myObj.PowerOn == 1) {
            powerstr = 'Выключить нагрев';
            powerstyle = 'red';
          } else {
            powerstr = 'Включить нагрев';
            powerstyle = 'lightgreen';
          }
          document.getElementById('power').value = powerstr;
          document.getElementById('power').style.backgroundColor = powerstyle;

        }
      };
      xhttp.onerror = function() {
        ConnectError(true);
      };
      xhttp.ontimeout = function() {
        ConnectError(true);
      };
      xhttp.open("GET", "/ajax", true);
      xhttp.send();
    };

    function calc_program () {
      if (!check_program(document.getElementById('WProgram').value)) {
        alert("Program error!");
        return;
      }
      var t = document.getElementsByClassName("prgline");
      var k, s;
      s = "";
      for (i = 1; i < t.length; i++) {
        k = t[i].childNodes;
        for (j = 1; j < 6; j++) {
          if (j == 4) {
            if (k[j].value == "") k[j].value = "0^0.00^0^0";
            if (char_count(k[j].value, "^") != 3) k[j].value = "0^0.00^0^0";
          }
          s = s + k[j].value + ";";
        }
        s = s.slice(0, -1);
        s = s + "\n";
      }
      document.getElementById('WProgram').value = s;
      set_num();
    }

    function set_num () {
      var e = document.getElementById("prg").childNodes;
      var a;
      for (i = 1; i < e.length; i++) {
        a = e[i].childNodes[0];
        a.innerText = "";
        if (i < 10) a.innerText = "0";
        a.innerText = a.innerText + i;
      }
    }

    function removeLine (ln) {
      var prg = document.getElementById("prg").childNodes.length;
      if (prg < 3) return;
      var prgline = document.getElementById(ln);
      prgline.remove();
      calc_program();
    }

    function addLine (obj, s) {
      //var s = "B;100;0.1;5;0.00;120";
      var arr = s.split(";");

      var dl = document.createElement("div");
      dl.className = "prgline";
      dl.id = "prgln" + _lnIdx;

      var num = document.createElement("label");
      num.className = "prglabel";
      dl.appendChild(num);

      num.insertAdjacentHTML("afterend", '<select id="ptype' + _lnIdx + '" name="ptype' + _lnIdx + '" onchange="set_bgcolor(' + _lnIdx + ')"><option value="P">Пауза</option><option value="M">Темп. закладки солода&nbsp;&nbsp;</option><option value="B">Кипячение</option><option value="C">Охлаждение</option><option value="W">Ожидание</option><option value="F">Брожение</option><option value="A">Автотюнинг</option><option value="L">Lua Скрипт</option></select>');

      //  var ptype = dl.getElementsByName("ptype");
      //  ptype[0].value = arr[0];

      var ptemp = document.createElement("input");
      ptemp.type = "text";
      ptemp.name = "ptemp" + _lnIdx;
      ptemp.value = arr[1];
      ptemp.setAttribute("onchange", "calc_program();");
      dl.appendChild(ptemp);

      var ptime = document.createElement("input");
      ptime.type = "text";
      ptime.name = "ptime" + _lnIdx;
      ptime.value = arr[2];
      ptime.setAttribute("onchange", "calc_program();");
      dl.appendChild(ptime);

      var pmixer = document.createElement("input");
      pmixer.type = "text";
      pmixer.id = "pmixer" + _lnIdx;
      pmixer.name = "pmixer" + _lnIdx;
      pmixer.value = arr[3];
      pmixer.setAttribute("width", "70");
      pmixer.setAttribute("onfocus", "popup_modal(" + _lnIdx + ");");
      dl.appendChild(pmixer);

      pmixer.insertAdjacentHTML("afterend", '<select id="dt' + _lnIdx + '" name="dt' + _lnIdx + '" onchange="calc_program()"><option value="0">Куб</option><option value="1">Вода</option><option value="2">Царга</option><option value="3">Пар</option><option value="4">ТСА</option></select>');

      var plus = document.createElement("img");
      plus.src = 'plus.png';
      plus.setAttribute("width", "20");
      plus.setAttribute("onclick", "addLine('prgln" + _lnIdx + "','W;0;0;;0')");
      dl.appendChild(plus);

      var minus = document.createElement("img");
      minus.src = 'minus.png';
      minus.setAttribute("width", "20");
      minus.setAttribute("onclick", "removeLine('prgln" + _lnIdx + "')");
      dl.appendChild(minus);

      if (!obj) {
        var prg = document.getElementById("prg");
        prg.appendChild(dl);
      } else {
        prg = document.getElementById(obj);
        prg.after(dl);
      }

      var p = "ptype" + _lnIdx;
      var ptype = document.getElementById(p);
      ptype.value = arr[0];

      p = "dt" + _lnIdx;
      ptype = document.getElementById(p);
      ptype.value = arr[4];

      set_bgcolor(_lnIdx);

      _lnIdx++;
      calc_program();
    }

    function popup_modal(idx){
      var arr = document.getElementById("pmixer" + idx).value.split("^");
      document.getElementById("popup").style.display = "block";
      document.getElementById("overlay").classList.add("show");
      document.getElementById("m_type").value = arr[0];
      document.getElementById("m_direction").value = parseInt(arr[1]);
      document.getElementById("m_time").value = arr[2];
      document.getElementById("m_pause").value = arr[3];
      document.getElementById("m_p_id").value = idx;
      document.getElementById("m_p_id").innerHTML = idx;
    }
    
    function validateMixerInput(inputElement) {
      let value = inputElement.value.trim();
      
      value = value.replace(/[^0-9]/g, '');
      
      let intValue = parseInt(value, 10);
      
      if (isNaN(intValue)) {
        intValue = 0;
      }
      
      const MAX_VALUE = 0x7fff; // 32767
      if (intValue > MAX_VALUE) {
        intValue = MAX_VALUE;
      }
      
      inputElement.value = intValue;
    }
    
    function popup_ok(){
     document.getElementById("popup").style.display = "none";
     document.getElementById("overlay").classList.remove("show");
     validateMixerInput(document.getElementById("m_time"));
     validateMixerInput(document.getElementById("m_pause"));
     document.getElementById("pmixer" + document.getElementById("m_p_id").value).value = document.getElementById("m_type").value + "^" + document.getElementById("m_direction").value + "^" + document.getElementById("m_time").value + "^" + document.getElementById("m_pause").value;
     calc_program();
    }

    function popup_cancel(){
     document.getElementById("popup").style.display = "none";
     document.getElementById("overlay").classList.remove("show");
    }

    function getProgram () {
      if (!check_program(document.getElementById('WProgram').value)) {
        alert("Program error!");
        return;
      }
      var e = document.getElementById("prg");
      e.insertAdjacentHTML("afterbegin", '<div class="prgline" id="hdr"><label class="tooltip">№</label>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<label class="tooltip">Тип программы</label>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<label class="tooltip">Темп<span class="tooltiptext">Задается для программ "Пауза", "Охлаждение", "Темп. закладки солода" и "Брага"</span></label>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<label class="tooltip">Время<span class="tooltiptext">Задается для программ "Пауза", "Ожидание" и "Кипячение"</span></label>&nbsp;&nbsp;&nbsp;<label class="tooltip">Мешалка<span class="tooltiptext">Управление мешалкой</span></label><label class="tooltip">Датчик темп.<span class="tooltiptext">Выбор датчика температуры для управления нагревом</span></label></div>');
      var p = document.getElementById("WProgram");
      var varr = p.value.split("\n");
      for (z = 0; z < varr.length; z++) {
        if (varr[z] != "") addLine(false, varr[z]);
      }
    }

    function set_bgcolor (obj) {
      var l = document.getElementById("prgln" + obj);
      var t = document.getElementById("ptype" + obj).value;
      let color = 'black';
      if (t == "M") {color = "background-color: #FFFF00;";}
      else if (t == "B") {color = "background-color: #FF6347;";}
      else if (t == "C") {color = "background-color: #00BFFF;";}
      else if (t == "P") {color = "background-color: #FFA500;";}
      else if (t == "W") {color = "background-color: #98FB98;";}
      else if (t == "F") {color = "background-color: #DACEFF;";}
      else if (t == "L") {color = "background-color: #3498DB;";}
      else if (t == "A") {color = "background-color: #FF2929;";}
      l.setAttribute("style", color);
      var e = l.childNodes;
      for (q = 0; q < e.length; q++) {
		e[q].setAttribute("style", color);
      }
      calc_program();
    }

    function run_lua (num) {
      sendbutton("lua=" + num);
    };

    function run_strlua() {
      var str = document.getElementById('lua_str_i').value.replace(" ", "^");
      sendbutton("luastr=" + str);
    };
    
    function sendwaterpwm () {
      var num = document.getElementById('PWM').value;
      var command = 'watert=' + num;
      sendbutton(command);
      //alert( "Ok! Pump speed set " + num);
      return 0;
    };

    function sliderChange () {
      document.getElementById('PWMt').value = document.getElementById('PWM').value;
      sendwaterpwm();
    }

    function changetxtpwm () {
      num = document.getElementById('PWMt').value;
      if (!num.match(/^\d+\.\d+$/) && !num.match(/^-{0,1}\d+$/)) {
        alert("Введите значение PWM!");
        return 0;
      }
      document.getElementById('PWM').value = num;
      sliderChange();
    }
    
    function char_count(str, ch) {
      counter = 0;
      for (let i = 0; i < str.length; i++) {
       if (str[i] === ch) counter++;
      }
      return counter;
    }

    window.onload = function() {
      setPowerUnit();
      AddLuaButtons();
      getProgram();
      setInterval(loadDoc, 2000);
    };

    document.addEventListener('DOMContentLoaded', function() {
      headers = document.querySelectorAll("[data-name='spoiler-title']");
      headers.forEach(function(item) {
        item.addEventListener("click", headerClick);
      });
      document.getElementById("WProgram").addEventListener("change", function(event) {
        if (!check_program(document.getElementById('WProgram').value)) {
          alert("Program error!");
          return;
        }
        var element = document.getElementById("prg");
        while (element.firstChild) {
          element.removeChild(element.firstChild);
        }
        getProgram();
      });
    });

</script>
</head>

<body>

  <div style="position: absolute; top: 0.3em; left: 0.5em; width: 20%; size: 1em; font-weight: bold; color: #FFF; text-decoration: underline; cursor: pointer" onclick='showHistory()'>История</div>
  <div class="history_box" style="display: none;" id="historyBox">
    <div style="position: absolute; right: 0.5em; top: 0.4em; z-index: 80000; size: 0.8em; font-style: italic; color: #000000; cursor: pointer" onclick='clearHistory()'>
      [x] очистить историю
    </div>
    <div class="history_array" id="historyList"></div>
  </div>

<div id="overlay"></div>
  <form action='none' onsubmit='return false' name="mainform" id="mainform">

    <div class="tab">
      <input type='button' class="tablinks active" onclick="openTab(event, 'Main');" value="Затирание">
      <input type='button' class="tablinks" onclick="openTab(event, 'Prog');" value="Программа">
      <input type='button' class="tablinks" onclick="openTab(event, 'Other');" value="Дополнительно">
    </div>
    <div id="Main" class="tabcontent" style="display: block;">

      <div class="container_row" style="justify-content: space-between; font-size: 1em; margin-bottom: 0.5em;">
        <div style="display: flex; flex-direction: row; justify-content: flex-start; align-items: center; font-weight: bold">
          <div style="display: flex; flex-direction: column; justify-content: flex-start; align-items: center">
            <div>Samovar</div> <span id='crnt_tm' style="height: 0; visibility: hidden"></span>
            <div style="display: flex; flex-direction: row; justify-content: flex-start; align-items: center;">
              <div>v. </div>
              <div id='version'></div>
            </div>
          </div>

          <div style="width: 21px; display: flex; flex-direction: column; justify-content: center; align-items: center">
            <div id="connection_indicator">
              <img src="Green.png" style="margin: 0 !important; width: 20px">
            </div>
          </div>

          <div class="messages_box" style="display: none;" id="messagesBox">
            <div style="position: absolute; height: 0.6em; top: 0; right: 0.5em; cursor: pointer" onclick='clearMessages()'>
              [x] очистить
            </div>
            <div class="messages_array" id="messages"></div>
          </div>
        </div>
        <div style="display: flex; flex-direction: column; align-items: center; font-weight: bold;">
          Работа: <span id='stm'></span>
        </div>
      </div>


      <div class="container_row" style="border: 1px dashed #bbb; margin-bottom: 1em;">

        <div class="container_column" style="flex: 1.1; padding-left: 2em;">
          <div class="text" style="color: %PipeColor%;">
            Т в царге: &nbsp;&nbsp;
            <span id='PipeTemp' style="font-size: xx-large;"></span>
            &#176;C
          </div>
          <div class="text" style="color: %SteamColor%;">
            Т пара: &nbsp;&nbsp;
            <span id='SteamTemp' style="font-size: xx-large;"></span>
            &#176;C
          </div>
        </div>

        <div class="container_column" style="flex: 1; align-items: flex-end; padding-right: 2em;">
          <div class="text" style="color: %WaterColor%;">
            Т воды: &nbsp;&nbsp;
            <span id='WaterTemp' style="font-size: xx-large;"></span>
            &#176;C
          </div>
          <div class="text" style="color: %TankColor%;">
            Т в кубе: &nbsp;&nbsp;
            <span id='TankTemp' style="font-size: xx-large;"></span>
            &#176;C
          </div>
          <div class="text" style="color: %ACPColor%;">
            Т в ТСА: &nbsp;&nbsp;
            <span id='ACPTemp' style="font-size: xx-large;"></span>
            &#176;C
          </div>
        </div>

      </div>

      <div class="container_row" style="margin-top: 1em; background-color: #7cfc0063; padding-top: 0.5em; padding-bottom: 0.5em;">
        <span style="padding-left: 1em; font-size: 1.5em; font-weight: bold; color: #333">
          Статус: <span id='Status'></span>
        </span>
      </div>

      <div class="container_column" style="border: 1px dashed #bbb; margin-bottom: 1em;">
        <div class="container">
          <div class="text">Прогресс: <span id='WthdrwlProgress'></span>&#37;</div>
        </div>
      </div>

      <div id="PWR" class="container_column" style="border: 1px dashed #bbb; align-items: center; margin-top: 1em; margin-bottom: 1em; padding-top: 1em;">
        <div id='VoltH2' class="container_row" style="justify-content: center; margin-top: 1em; visibility: hidden; position: absolute;">
          <div class="flex_row">
            <span class="text" id='set_power_label'></span>
            <input name='Voltage' id='Voltage' type='text' value=''>
          </div>
          <div class="flex_row" style="padding-bottom: 0.5em;">
            <input id='SetVoltage' type='submit' name='SetVoltage' onclick='sendvoltage();' class="button">
          </div>
        </div>
        <div id='regulator' class='container_row' style="justify-content: space-around; font-size: 1.4em; font-weight: bold; margin-top: 1em;">
          <div class='flex_row'>
            <span id='power_current'></span>
            <span id='current_power_volt'></span>
            <span id='power_unit_current'></span>
          </div>
          <div class='flex_row'>
            <span id='power_target'></span>
            <span id='target_power_volt'></span>
            <span id='power_unit_target'></span>
          </div>
          <div class='flex_row'>
            Режим регулятора: <span id='current_power_mode'></span>
          </div>
        </div>
        <div class="container_row" style="justify-content: center; font-size: 1.6em; font-weight: bold;">
          <span class='dvcs' id='current_power_line'>
            Мощность: <span id='current_power_p'></span> Вт
          </span>
        </div>
      </div>

      <div>
        <span class='dvcs'>Системные параметры: Heap=<span id='heap'></span>; BME temp=<span id='bme_temp'></span>; RSSI = <span id='rssi'></span>; Свободно: <span id='fr_bt'></span><span id='add_param'></span></span>
      </div>
      <div>
        <input id='power' type='submit' name='power' class="button" value='Включить нагрев' onclick='sendbutton("power=1");'>
        <input id='start' type='submit' name='start' class="button" value='Следующая программа' onclick='sendbutton("start=1");'>
        <input id='chart' type='submit' name='chart' class="button" value='График' onclick='javascript:location.href="chart.htm"'>
        <input id='setup' type='submit' name='setup' class="button" value='Настройки' onclick='javascript:location.href="setup.htm"'>
      </div>
    </div>
    <div id="Prog" class="tabcontent">
      <div class="text">Программа затирки:</div>
      <div class="prg" id="prg"></div>
      <div class="list-group">
        <div class="list-group-item list-header" data-name="spoiler-title">
          <span class="spoiler-sign">[+]</span>Описание программы затирки:
        </div>
        <div class="list-group-item list-content spoiler-body">
          <textarea cols="40" rows="7" id='WProgram' name='WProgram'>%WProgram%</textarea>
          <div class='dvcs'>
            <p><span>Параметры программы затирания: Тип программы;Температура;Время;Режим работы мешалки</span></p>
            <p><span>&nbsp;</span></p>
            <p><span>M - malt application temp (температура закладки солода), P - pause (пауза при заданной температуре),</span></p>
            <p><span>B - boil (кипячение и засыпка хмеля в конце), C - cool (охлаждение до заданной температуры),</span></p>
            <p><span>W - wait (режим ожидания, ничего не делает до смены строки программы)</span></p>
            <p><span>F - ferment (ферментирование, режим браги, поддерживает заданную температуру до сменты строки программы)</span></p>
            <p><span>L - Lua скрипт, управление Самоваром осуществляется через Lua скрипт, скрипт необходимо самостоятельно запустить и, если необходимо, остановить. При переходе на следующую строку программы скрипт останавливается. Никакие параметры строки программы не используются.</span></p>
            <p><span>A - AutoTune (автотюнинг)</span></p>
            <p><span>&nbsp;</span></p>
            <p><span>Пример программы отбора:</span></p>
            <p><span>M;45.00;0;1^1.00^1^1</span></p>
            <p><span>P;60.00;1;1^1.00^1^1</span></p>
            <p><span>W;0.00;1;1^1.00^1^1</span></p>
            <p><span>B;0.00;1;1^1.00^1^1</span></p>
            <p><span>C;30.00;0;1^1.00^1^1</span></p>
            <p><span>&nbsp;</span></p>
            <p><span>&nbsp;</span></p>
            <p><span>Описание режима работы мешалки: последним значением задается режим работы мешалки. 1^-1.00^2^3, где</span></p>
            <p><span>1 - Тип устройства - 1 - мешалка, 2 - насос, 3 - мешалка и насос одновременно</span></p>
            <p><span>-1.00 - Направление вращения, если задано отрицательное значение - мешалка после паузы меняет направление вращения (если поддерживает оборудование)</span></p>
            <p><span>2 - Время включения в секундах</span></p>
            <p><span>3 - Время выключения в секундах</span></p>
          </div>
        </div>
      </div>
      <div class="list-group">
        <div class="list-group-item list-header" data-name="spoiler-title">
          <span class="spoiler-sign">[+]</span>Описание программы затирки в текстовом формате для сохранения в облаке:
        </div>
        <div class="list-group-item list-content spoiler-body">
          <textarea cols="40" rows="5" id='Descr' name='Descr' maxlength='250'>%Descr%</textarea>
        </div>
      </div>
      <hr style="margin-bottom: 20px !important; margin-top: 20px !important;">
      <div style="margin: 0 auto; width: 200px;">
        <input id='saveform' type='button' name='saveform' value='Сохранить программу' onclick='SaveProgramToFile();' class="button">
      </div>

      <div style="margin: 0 auto; width: 200px;">
        <label for="fileToLoad" class="button custom-file-upload" style="margin-left: 0px !important;">
          <i class="fa fa-cloud-upload"></i> Загрузить программу
        </label>
        <input type="file" id="fileToLoad" accept="text/plain" onchange="loadFile(this.files[0])" class="button" />
      </div>


      <div style="margin: 0 auto; margin-top: 20px !important; width: 200px;">
        <input id='setprogram' type='button' name='setprogram' value='Установить программу' onclick='set_program();' class="button">
      </div>

      <div style="margin: 0 auto; margin-top: 20px !important; width: 200px;">
        <input id='loadprogram' type='button' name='loadprogram' value='Загрузить рецепт из XML' onclick='javascript:location.href="brewxml.htm"' class="button">
      </div>
      
  <div id="popup" class="popup">
    <div class="popup__content">
      <h2 class="popup__title">
    	Редактирование параметров мешалки
      </h2>

      <div style="border: 1px dashed #bbb; margin-bottom: 1em; padding: 20px !important;">
        <div style="font-size: 18px; margin-left: 15px;">
          <label>&nbsp;&nbsp;Тип устройства&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</label>
          <label>Направление вращения&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</label>
          <label>Вкл сек</label>
          <label>Выкл сек</label>
        </div>
        <div id="popup_mesh" class="modalline">
          <select id="m_type" style="margin-left: 4px !important;"><option value="0">Выключено</option><option value="1">Мешалка</option><option value="2">Насос</option><option value="3">Мешалка и насос</option></select>
          <select id="m_direction" style="margin-left: 4px !important;"><option value="-1">Реверс после паузы</option><option value="0">Вращение в прямом направлении</option><option value="1">Вращение в обратную сторону</option></select>
          <input type="text" id="m_time" style="padding-top: 4px !important; padding-bottom: 4px !important; height: 31px !important;" onchange="validateMixerInput(this)" onblur="validateMixerInput(this)">
          <input type="text" id="m_pause" style="padding-top: 4px !important; padding-bottom: 4px !important; height: 31px !important;" onchange="validateMixerInput(this)" onblur="validateMixerInput(this)">
          <input type="hidden" id="m_p_id">
        </div>
      </div>
      <div class="btn-container">
        <button id="no-btn" class="popup__button" onclick="popup_cancel();">
          Отмена
        </button>
        <button id="yes-btn" class="popup__button" onclick="popup_ok();">
          Ок
        </button>
      </div>
    </div>
  </div>
      

    </div>

    <div id="Other" class="tabcontent">
      <div class="container_row" style="border: 1px dashed #bbb; margin-bottom: 1em; justify-content: space-between;">
        <div class="text" id='WaterH2'>
          <div class="container_row" style="padding-left: 2em; justify-content: space-around; align-items:center;">
            <div>
              Скорость насоса:
              <input name='PWM' id='PWM' type='range' min="%PWM_LV%" max="1023" value='%PWM_V%' list="tickmarks" onchange='sliderChange();'>
              <datalist id="tickmarks">
                <option value="%PWM_LV%">
                <option value="300">
                <option value="500">
                <option value="700">
                <option value="900">
                <option value="1023">
              </datalist>
            </div>
            <input id='PWMt' type='text' name='PWMt' value='' onchange='changetxtpwm();'>
          </div>
        </div>

      </div>

      <div style="visibility: hidden" id="lua_btn">
        <div class="container_row" style="border: 1px dashed #bbb; margin-bottom: 1em; justify-content: space-between;">
          <div class="container_column" style="flex: 1.1; padding-left: 2em;">
            <div class="container_row" style="justify-content: space-around; align-items: center; display: block;" id="lua_btn_ln"></div>
            <div class="container_row" style="justify-content: space-around; align-items: center;" id="lua_str_d">
              <input name='lua_str_i' id='lua_str_i' type='text' value='' style='padding: 5px; width: 200px; margin-bottom: 10px; margin-left: 100px;'>
              <input type="submit" name="lua_str_b" value="Выполнить Lua" class="button" onclick="run_strlua();" style='margin-bottom: 20px; margin-right: 100;'>
            </div>
            <div class="container_row" style="margin-top: 10px !important; margin-bottom: 10px !important;"><span>Статус Lua:</span><span id="Lstatus"></span></div>
          </div>
        </div>
      </div>
    </div>

  </form>
  <img src="Red_light.gif" style="width: 0; height: 0; visibility: hidden;">
</body>

</html>