<html><head><meta charset='utf-8'><meta http-equiv="Cache-Control" content="no-cache"><link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" /><link rel="stylesheet" href="/style.css"><title>Самовар</title><script> // ==================== CONNECTION STATUS ============================================================ var IsOffline = false; //признак обрыва связи var OfflineCouner = 0; function ConnectError (Type) { if (Type) { if (!OfflineCouner) { //если это первый обрыв OfflineCouner++ } else { document.getElementById('connection_indicator').innerHTML = ` <img src="Red_light.gif" style="margin: 0!important; width: 20px">`; addMessage('Обрыв связи!', 0); setTimeout(() => { IsOffline = true; OfflineCouner = 0 }, 100); } } else { document.getElementById('connection_indicator').innerHTML = ` <img src="Green.png" style="margin: 0 !important; width: 20px">` IsOffline = false; OfflineCouner = 0 } }; // ==================== POWER UNIT =================================================================== function setPowerUnit () { let setPowerLabel; let setPowerButton; let powerCurrent; let powerTarget; let powerUnit; if (pwr_unit === 'P') { setPowerLabel = 'Мощность регулятора: '; setPowerButton = 'Установить мощность'; powerCurrent = 'Текущая мощн.: '; powerTarget = 'Целевая мощн.: '; powerUnit = ' Вт'; document.getElementById('current_power_line').style = 'visibility: hidden'; document.getElementById('PWR').style = ''; } else if (pwr_unit === 'V') { setPowerLabel = 'Напряжение регулятора: '; setPowerButton = 'Установить напряжение'; powerCurrent = 'Текущее напр.: '; powerTarget = 'Целевое напр.: '; powerUnit = ' V'; document.getElementById('current_power_line').style = 'visibility: visible'; document.getElementById('PWR').style = ''; } else { document.getElementById('PWR').style = 'visibility: hidden;position: fixed;'; } document.getElementById('set_power_label').innerHTML = setPowerLabel; document.getElementById('SetVoltage').value = setPowerButton; document.getElementById('power_current').innerHTML = powerCurrent; document.getElementById('power_target').innerHTML = powerTarget; document.getElementById('power_unit_current').innerHTML = powerUnit; document.getElementById('power_unit_target').innerHTML = powerUnit; } // ==================== LUA BUTTONS ================================================================== function AddLuaButtons () { let btn_list = '%btn_list%'; if (btn_list !== '') { let btn_arr = btn_list.split(','); for (z = 0; z < btn_arr.length; z++) { if (btn_arr[z] !== '') { let arr = btn_arr[z].split('|'); let btn = document.createElement('input'); btn.type = 'submit'; btn.name = 'luabtn' + z; btn.value = arr[1]; btn.className = 'button'; btn.setAttribute('onclick', 'run_lua("' + arr[0] + '");'); document.getElementById('lua_btn_ln').appendChild(btn); document.getElementById('lua_btn').style = 'visibility: visible'; } } } } // ==================== SOUND & MESSAGES QUEUE ======================================================= var sound_is_on = true; //признак включения звукв (будет изменён на настройку пользователя при ajax) var IsCalmingPause = false; //признак паузы при отборе (чтобы не повторять вывод сообщения каждые 2 секунды) var Messages_Array = []; //текущий массив сообщений var sound_is_playing = false; //звук сейчас восспроизводится var is_ALARM = false; //признак тревоги const sound = new Audio('alarm.mp3'); sound.loop = true; sound.preload = 'auto'; sound.autoplay = false; function playSound (play) { if (!sound_is_playing && play) { sound.play(); sound_is_playing = true; } else if (sound_is_playing && !play) { sound.pause(); sound_is_playing = false; } } function addMessage (msg, lvl) { if (IsOffline) { return; //ничего не делаем чтобы не дублировать сообщения о продолжающемся разрыве связи } else { let time = new Date().toLocaleTimeString('ru-RU'); let style = null; switch (lvl) { case 0: style = 'message_0'; is_ALARM = true; break; case 1: style = 'message_1'; break; case 2: style = 'message_2'; break; default: style = 'message_0'; is_ALARM = true; break; } let lastMsg = ` <div align="left" class=${style} onclick=removeLastMessage() style="cursor: pointer"> ${time} ${msg} </div>`; Messages_Array.push(lastMsg); //добавляем сообщение в конец очереди if (Messages_Array.length > 1) { //убираем у предпоследнего сообщения обработчик удаления, активно всегда последнее previousMsg = Messages_Array[Messages_Array.length - 2]; let changed = previousMsg.replace( 'onclick=removeLastMessage() style="cursor: pointer"', '' ); Messages_Array[Messages_Array.length - 2] = changed; } showMessages(); } } function removeLastMessage () { //удаляям последнее сообщение Messages_Array.pop(); if (Messages_Array.length > 0) { lastMsg = Messages_Array[Messages_Array.length - 1]; let changed = lastMsg.replace( '<div align="left"', '<div align="left" onclick=removeLastMessage() style="cursor: pointer"' ); Messages_Array[Messages_Array.length - 1] = changed; } else { is_ALARM = false; IsCalmingPause = false; } showMessages(); } function showMessages () { //показываем обновлённый список сообщений if (Messages_Array.length > 0) { let alarm_is_there = []; //массив false/true для признаков тревоги document.getElementById('messages').innerHTML = ''; Messages_Array.forEach(message => { document.getElementById('messages').innerHTML += message; alarm_is_there.push(message.includes('class=message_0')); }); document.getElementById('messagesBox').style.display = 'block'; let queue = document.getElementById('messagesBox'); queue.scrollTop = queue.scrollHeight; function positive (item) { return item === true; } is_ALARM = alarm_is_there.some(positive); //содержит ли хоть одно сообщение признак тревоги if (sound_is_on & is_ALARM) { //играем звук тревоги, если включён playSound(true); } else { playSound(false); } } else { //убираем блок, если очередь пуста document.getElementById('messagesBox').style.display = 'none'; playSound(false); } } function clearMessages () { Messages_Array = []; showMessages(); } var pwr_unit = "%pwr_unit%"; var _lnIdx = 0; var headers = document.querySelectorAll("[data-name='spoiler-title']"); function headerClick () { this.nextElementSibling.classList.toggle("spoiler-body"); var s = this.parentNode.getElementsByClassName("spoiler-sign"); if (s[0].innerHTML == "[+]") s[0].innerHTML = "[-]"; else s[0].innerHTML = "[+]"; } function loadFile (e) { var file = e; var reader = new FileReader(); reader.onload = function() { var element = document.getElementById("prg"); while (element.firstChild) { element.removeChild(element.firstChild); } document.getElementById('WProgram').value = reader.result; glcalcnum = false; getProgram(); }; reader.readAsText(file, "UTF-8"); } function SaveProgramToFile () { var filename, text; filename = 'programbackup.txt'; // text = getJson(document.getElementById('setupform')); text = document.getElementById('WProgram').value; var pom = document.createElement('a'); pom.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text)); pom.setAttribute('download', filename); pom.style.display = 'none'; document.body.appendChild(pom); pom.click(); document.body.removeChild(pom); } function openTab (evt, tabName) { var i, tabcontent, tablinks; tabcontent = document.getElementsByClassName("tabcontent"); for (i = 0; i < tabcontent.length; i++) { tabcontent[i].style.display = "none"; } tablinks = document.getElementsByClassName("tablinks"); for (i = 0; i < tablinks.length; i++) { tablinks[i].className = tablinks[i].className.replace(" active", ""); } document.getElementById(tabName).style.display = "block"; evt.currentTarget.className += " active"; return 0; } function check_program (str) { var arrayOfStrings = str.split("\n"); var prevcnt = 0; var ret = true; var cnt; for (i = 0; i < arrayOfStrings.length; i++) { var arrayOfDelim = arrayOfStrings[i].split(";"); cnt = arrayOfDelim.length; if (cnt == 1 && arrayOfDelim[0] != "" && arrayOfStrings.length == i - 1) ret = false; else if (prevcnt > 0 && cnt > 1) { if (prevcnt != cnt) ret = false; } prevcnt = cnt; } return ret; } function set_program () { document.getElementById("WProgram").value = document.getElementById("WProgram").value.replace(",", "."); if (!check_program(document.getElementById('WProgram').value)) { alert("Program error!"); return; } var server = '/program'; request = new XMLHttpRequest(); request.onreadystatechange = function() { if (this.readyState == 4 && this.status == 200) { var myObj = this.responseText; if (myObj != "OK") { document.getElementById('WProgram').value = myObj; alert("Ok"); } } }; request.open('POST', server, false); let formData = new FormData(document.forms.mainform); request.send(formData); if (request.status != 200) { alert(request.status + ': ' + request.statusText); } return 0; }; function sleep (milliseconds) { var start = new Date().getTime(); for (var i = 0; i < 1e7; i++) { if ((new Date().getTime() - start) > milliseconds) { break; } } }; function sendbutton (command) { var server = '/command?' + command; request = new XMLHttpRequest(); request.open('GET', server, false); request.send(); if (request.status != 200) { alert("sendbutton ERROR! " + request.status + ': ' + request.statusText); } sleep(1000); return 0; }; function sendvoltage () { var num = document.getElementById('Voltage').value; if (!num.match(/^\d+\.\d+$/) && !num.match(/^-{0,1}\d+$/)) { alert("Введите напряжение!"); return 0; } var command = 'voltage=' + num; sendbutton(command); alert("Установлено."); return 0; }; function sendpumpspeed () { var num = document.getElementById('pumpspeed').value; if (!num.match(/^\d+\.\d+$/) && !num.match(/^-{0,1}\d+$/)) { alert("Введите скорость!"); return 0; } var command = 'pumpspeed=' + num; sendbutton(command); alert("Ok"); return 0; }; setInterval(loadDoc, 2000); function loadDoc () { var xhttp = new XMLHttpRequest(); xhttp.timeout = 4000; xhttp.onreadystatechange = function() { if (this.readyState == 4 && this.status == 200) { ConnectError(false); var myObj = JSON.parse(this.responseText); document.getElementById('version').innerHTML = myObj.version; document.getElementById('crnt_tm').innerHTML = myObj.crnt_tm; document.getElementById('stm').innerHTML = myObj.stm; document.getElementById('TankTemp').innerHTML = myObj.TankTemp.toFixed(3); document.getElementById('WthdrwlProgress').innerHTML = myObj.WthdrwlProgress; if (myObj.PrgType === "P") myObj.PrgType = "Пауза; " else if (myObj.PrgType === "M") myObj.PrgType = "Темп. закладки солода; " else if (myObj.PrgType === "B") myObj.PrgType = "Кипячение; " else if (myObj.PrgType === "C") myObj.PrgType = "Охлаждение; " else if (myObj.PrgType === "W") myObj.PrgType = "Ожидание; " else if (myObj.PrgType === "F") myObj.PrgType = "Брожение; " document.getElementById('Status').innerHTML = myObj.PrgType + myObj.Status; document.getElementById('current_power_volt').innerHTML = myObj.current_power_volt; document.getElementById('target_power_volt').innerHTML = myObj.target_power_volt; document.getElementById('current_power_mode').innerHTML = myObj.current_power_mode; document.getElementById('current_power_p').innerHTML = myObj.current_power_p; document.getElementById('bme_temp').innerHTML = myObj.bme_temp; document.getElementById('heap').innerHTML = myObj.heap; document.getElementById('rssi').innerHTML = myObj.rssi; document.getElementById('fr_bt').innerHTML = myObj.fr_bt; sound_is_on = !!myObj.UseBBuzzer; if (myObj.Lstatus) { if (myObj.Lstatus != "") { document.getElementById('Lstatus').innerHTML = myObj.Lstatus; } } if (myObj.Msg && myObj.Msg !== "") { addMessage(myObj.Msg, myObj.msglvl); } if (myObj.LogMsg && myObj.LogMsg !== "") { console.log(myObj.crnt_tm + "; " + myObj.LogMsg); } var powerstr; var powerstyle; if (myObj.PowerOn == 1) { powerstr = 'Выключить нагрев'; powerstyle = 'red'; } else { powerstr = 'Включить нагрев'; powerstyle = 'lightgreen'; } document.getElementById('power').value = powerstr; document.getElementById('power').style.backgroundColor = powerstyle; } }; xhttp.onerror = function() { ConnectError(true); }; xhttp.ontimeout = function() { ConnectError(true); }; xhttp.open("GET", "/ajax", true); xhttp.send(); }; function calc_program () { if (!check_program(document.getElementById('WProgram').value)) { alert("Program error!"); return; } var t = document.getElementsByClassName("prgline"); var k, s; s = ""; for (i = 1; i < t.length; i++) { k = t[i].childNodes; for (j = 1; j < 4; j++) { s = s + k[j].value + ";"; } s = s.slice(0, -1); s = s + "\n"; } document.getElementById('WProgram').value = s; set_num(); } function set_num () { var e = document.getElementById("prg").childNodes; var a; for (i = 1; i < e.length; i++) { a = e[i].childNodes[0]; a.innerText = ""; if (i < 10) a.innerText = "0"; a.innerText = a.innerText + i; } } function removeLine (ln) { var prg = document.getElementById("prg").childNodes.length; if (prg < 3) return; var prgline = document.getElementById(ln); prgline.remove(); calc_program(); } function addLine (obj, s) { //var s = "B;100;0.1;5;0.00;120"; var arr = s.split(";"); var dl = document.createElement("div"); dl.className = "prgline"; dl.id = "prgln" + _lnIdx; var num = document.createElement("label"); num.className = "prglabel"; dl.appendChild(num); num.insertAdjacentHTML("afterend", '<select id="ptype' + _lnIdx + '" name="ptype' + _lnIdx + '" onchange="set_bgcolor(' + _lnIdx + ')"><option value="P">Пауза</option><option value="M">Темп. закладки солода&nbsp;&nbsp;</option><option value="B">Кипячение</option><option value="C">Охлаждение</option><option value="W">Ожидание</option><option value="F">Брожение</option></select>'); // var ptype = dl.getElementsByName("ptype"); // ptype[0].value = arr[0]; var ptemp = document.createElement("input"); ptemp.type = "text"; ptemp.name = "ptemp" + _lnIdx; ptemp.value = arr[1]; ptemp.setAttribute("onchange", "calc_program();"); dl.appendChild(ptemp); var ptime = document.createElement("input"); ptime.type = "text"; ptime.name = "ptime" + _lnIdx; ptime.value = arr[2]; ptime.setAttribute("onchange", "calc_program();"); dl.appendChild(ptime); var plus = document.createElement("img"); plus.src = '/plus.png'; plus.setAttribute("width", "20"); plus.setAttribute("onclick", "addLine('prgln" + _lnIdx + "','W;0;0')"); dl.appendChild(plus); var minus = document.createElement("img"); minus.src = '/minus.png'; minus.setAttribute("width", "20"); minus.setAttribute("onclick", "removeLine('prgln" + _lnIdx + "')"); dl.appendChild(minus); if (!obj) { var prg = document.getElementById("prg"); prg.appendChild(dl); } else { prg = document.getElementById(obj); prg.after(dl); } var p = "ptype" + _lnIdx; var ptype = document.getElementById(p); ptype.value = arr[0]; set_bgcolor(_lnIdx); _lnIdx++; calc_program(); } function getProgram () { if (!check_program(document.getElementById('WProgram').value)) { alert("Program error!"); return; } var e = document.getElementById("prg"); e.insertAdjacentHTML("afterbegin", '<div class="prgline" id="hdr"><label class="tooltip">№</label>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<label class="tooltip">Тип программы</label>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<label class="tooltip">Темп<span class="tooltiptext">Задается для программ "Пауза", "Охлаждение", "Темп. закладки солода" и "Брага"</span></label>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<label class="tooltip">Время<span class="tooltiptext">Задается для программ "Пауза", "Ожидание" и "Кипячение"</span></label></div>'); var p = document.getElementById("WProgram"); var varr = p.value.split("\n"); for (z = 0; z < varr.length; z++) { if (varr[z] != "") addLine(false, varr[z]); } } function set_bgcolor (obj) { var l = document.getElementById("prgln" + obj); var t = document.getElementById("ptype" + obj).value; let color = 'black'; if (t == "M") {color = "background-color: #FFFF00;";} else if (t == "B") {color = "background-color: #FF6347;";} else if (t == "C") {color = "background-color: #00BFFF;";} else if (t == "P") {color = "background-color: #FFA500;";} else if (t == "W") {color = "background-color: #98FB98;";} else if (t == "F") {color = "background-color: #DACEFF;";} l.setAttribute("style", color); var e = l.childNodes; for (q = 0; q < e.length; q++) { e[q].setAttribute("style", color); } calc_program(); } window.onload = function() { headers = document.querySelectorAll("[data-name='spoiler-title']"); headers.forEach(function(item) { item.addEventListener("click", headerClick); }); getProgram(); document.getElementById("WProgram").addEventListener("change", function(event) { if (!check_program(document.getElementById('WProgram').value)) { alert("Program error!"); return; } var element = document.getElementById("prg"); while (element.firstChild) { element.removeChild(element.firstChild); } getProgram(); }); setPowerUnit(); AddLuaButtons(); }; function run_lua (num) { sendbutton("lua=" + num); }; </script></head><!-- =============================================================================================================== --><body><form action='none' onsubmit='return false' name="mainform" id="mainform"><div class="tab"><input type='button' class="tablinks active" onclick="openTab(event, 'Main');" value="Затирание"><input type='button' class="tablinks" onclick="openTab(event, 'Prog');" value="Программа"><input type='button' class="tablinks" onclick="openTab(event, 'Other');" value="Дополнительно"></div><div id="Main" class="tabcontent" style="display: block;"><div class="container_row" style="justify-content: space-between; font-size: 1em; margin-bottom: 0.5em;"><div style="display: flex; flex-direction: row; justify-content: flex-start; align-items: center; font-weight: bold"><div style="display: flex; flex-direction: column; justify-content: flex-start; align-items: center"><div>Samovar</div><span id='crnt_tm' style="height: 0; visibility: hidden"></span><div style="display: flex; flex-direction: row; justify-content: flex-start; align-items: center;"><div>v. </div><div id='version'></div></div></div><div style="width: 21px; display: flex; flex-direction: column; justify-content: center; align-items: center"><div id="connection_indicator"><img src="Green.png" style="margin: 0 !important; width: 20px"></div></div><div class="messages_box" style="display: none;" id="messagesBox"><div style="position: absolute; height: 0.6em; top: 0; right: 0.5em; cursor: pointer" onclick='clearMessages()'> [x] очистить </div><div class="messages_array" id="messages"></div></div></div><div style="display: flex; flex-direction: column; align-items: center; font-weight: bold;"> Работа: <span id='stm'></span></div></div><div class="container_column" style="border: 1px dashed #bbb; margin-bottom: 1em;"><div class="container"><div class="text column" style="color: %TankColor%;">Т в кубе: <span id='TankTemp' style="font-size: xx-large;"></span>&#176;C</div></div></div><div class="container_row" style="margin-top: 1em; background-color: #7cfc0063; padding-top: 0.5em; padding-bottom: 0.5em;"><span style="padding-left: 1em; font-size: 1.5em; font-weight: bold; color: #333"> Статус: <span id='Status'></span></span></div><div class="container_column" style="border: 1px dashed #bbb; margin-bottom: 1em;"><div class="container"><div class="text">Прогресс: <span id='WthdrwlProgress'></span>&#37;</div></div></div><div class="container_row" style="border: 1px dashed #bbb; margin-bottom: 1em; justify-content: space-between;" id="PWR"><div class="container_column" style="border: 1px dashed #bbb; margin-bottom: 1em;"><div class="text" id='VoltH2' style="visibility: hidden; position: absolute;"><div class="container_row" style="padding-left: 2em; justify-content: space-around; align-items:center;"><span id='set_power_label'></span><input name='Voltage' id='Voltage' type='text' value=''></div><input id='SetVoltage' type='submit' name='SetVoltage' class="button"></div><div class='dvcs' id='regulator' style="padding-left: 0 !important; padding-right: 0 !important;"><span class='dvcs'><span id='power_current'></span><span id='current_power_volt'></span><span id='power_unit_current'></span></span><span class='dvcs'><span id='power_target'></span><span id='target_power_volt'></span><span id='power_unit_target'></span></span><span class='dvcs'> Режим регулятора: <span id='current_power_mode'></span></span><span class='dvcs' id='current_power_line'> Мощность: <span id='current_power_p'></span> Вт </span></div></div></div><div><span class='dvcs'>Системные параметры: Heap=<span id='heap'></span>; BME temp=<span id='bme_temp'></span>; RSSI = <span id='rssi'></span>; Свободно: <span id='fr_bt'></span></span></div><div><input id='power' type='submit' name='power' class="button" value='Включить нагрев' onclick='sendbutton("power=1");'><input id='start' type='submit' name='start' class="button" value='Следующая программа' onclick='sendbutton("start=1");'><input id='chart' type='submit' name='chart' class="button" value='График' onclick='javascript:location.href="/chart.htm"'><input id='setup' type='submit' name='setup' class="button" value='Настройки' onclick='javascript:location.href="/setup.htm"'></div></div><div id="Prog" class="tabcontent"><div class="text">Программа затирки:</div><div class="prg" id="prg"></div><div class="list-group"><div class="list-group-item list-header" data-name="spoiler-title"><span class="spoiler-sign">[+]</span>Описание программы затирки: </div><div class="list-group-item list-content spoiler-body"><textarea cols="40" rows="7" id='WProgram' name='WProgram'>%WProgram%</textarea><div class='dvcs'><p><span>Параметры программы затирания: Тип программы;Температура;Время</span></p><p><span>M - malt application temp (температура закладки солода), P - pause (пауза при заданной температуре), B - boil (кипячение и засыпка хмеля в конце), C - cool (охлаждение до заданной температуры), W - wait (режим ожидания, ничего не делает до смены строки программы), F - ferment (ферментирование, режим браги, поддерживает заданную температуру до сменты строки программы).</span></p><p><span>Пример программы отбора</span></p><p><span>M;45.00;0</span></p><p><span>P;60.00;1</span></p><p><span>W;0.00;1</span></p><p><span>B;0.00;1</span></p><p><span>C;30.00;0</span></p></div></div></div><div class="list-group"><div class="list-group-item list-header" data-name="spoiler-title"><span class="spoiler-sign">[+]</span>Описание программы затирки в текстовом формате для сохранения в облаке: </div><div class="list-group-item list-content spoiler-body"><textarea cols="40" rows="5" id='Descr' name='Descr' maxlength='250'>%Descr%</textarea></div></div><hr style="margin-bottom: 20px !important; margin-top: 20px !important;"><div style="margin: 0 auto; width: 200px;"><input id='saveform' type='button' name='saveform' value='Сохранить программу' onclick='SaveProgramToFile();' class="button"></div><div style="margin: 0 auto; width: 200px;"><label for="fileToLoad" class="button custom-file-upload" style="margin-left: 0px !important;"><i class="fa fa-cloud-upload"></i> Загрузить программу </label><input type="file" id="fileToLoad" accept="text/plain" onchange="loadFile(this.files[0])" class="button" /></div><div style="margin: 0 auto; margin-top: 20px !important; width: 200px;"><input id='setprogram' type='button' name='setprogram' value='Установить программу' onclick='set_program();' class="button"></div><div style="margin: 0 auto; margin-top: 20px !important; width: 200px;"><input id='loadprogram' type='button' name='loadprogram' value='Загрузить рецепт из XML' onclick='javascript:location.href="/brewxml.htm"' class="button"></div></div><div id="Other" class="tabcontent"><div style="visibility: hidden" id="lua_btn"><div class="container_row" style="border: 1px dashed #bbb; margin-bottom: 1em; justify-content: space-between;"><div class="container_column" style="flex: 1.1; padding-left: 2em;"><div class="container_row" style="justify-content: space-around; align-items: center;" id="lua_btn_ln"></div><div class="container_row" style="margin-top: 10px !important; margin-bottom: 10px !important;"><span>Статус Lua:</span><span id="Lstatus"></span></div></div></div></div></div></form></body></html>